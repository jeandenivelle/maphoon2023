
// The code below was generated by Maphoon 2022.

// Definition of struct symbol:

#ifndef SYMBOL_
#define SYMBOL_    1

#include <iostream>
#include <variant>
#include <optional>
#include <stdexcept>

#line 15 "grammar.m"
 #include <string> 
 #include "instance.h" 

enum symboltype
{
   sym__recover_, sym_VALUE, sym_COMMENT, sym_NEWLINE, 
   sym_SEMICOLON, sym_END, sym_WHITESPACE, sym_ERROR, 
   sym_Newlines, sym_Triple, sym_Instance
};

const char* getcstring( symboltype );

inline std::ostream& operator << ( std::ostream& out, symboltype tp )
   { out << getcstring( tp );  return out; }

struct symbol
{
   using attrtype = std::variant < std::monostate, instance<std::string, std::string, std::string>, triple<std::string, std::string, std::string>, 
         std::string > ;

   symboltype type;
   attrtype attr;

   symbol( ) = delete;
   symbol( const symbol& ) = default;
   symbol( symbol&& ) noexcept = default;
   symbol& operator = ( const symbol& ) = default;
   symbol& operator = ( symbol&& ) noexcept = default;
   ~symbol( ) = default;

   symbol( symboltype type )
    : type( type )
   { }

   symbol( symboltype type,
           attrtype && attr )
    : type( type ),
      attr( std::move( attr ))
   { }

   symbol( symboltype type,
           const instance<std::string, std::string, std::string> & attr )
    : type( type ),
      attr( attr )
   { }

   symbol( symboltype type,
           instance<std::string, std::string, std::string> && attr )
    : type( type ),
      attr( std::move( attr ))
   { }

   symbol( symboltype type,
           const triple<std::string, std::string, std::string> & attr )
    : type( type ),
      attr( attr )
   { }

   symbol( symboltype type,
           triple<std::string, std::string, std::string> && attr )
    : type( type ),
      attr( std::move( attr ))
   { }

   symbol( symboltype type,
           const std::string & attr )
    : type( type ),
      attr( attr )
   { }

   symbol( symboltype type,
           std::string && attr )
    : type( type ),
      attr( std::move( attr ))
   { }


   void print( std::ostream& out ) const;

   bool has_right_attribute( ) const;

   template< typename T > T& get( )
      { return std::get<T> ( attr ); }
   
   template< typename T > const T& get( ) const &
      { return std::get<T> ( attr ); }
   
   template< typename T > const T& get( ) &&
      { return std::get<T> ( std::move( attr ) ); }
   
};

inline
std::ostream& operator << ( std::ostream& out, const symbol& sym )
   { sym. print( out ); return out; }


#endif


