
// Parser generated by Maphoon 2022.
// Written by Hans de Nivelle, March 2021-May 2022.
// See the licence that was included with the code.

#include "parser.h"



size_t 
parser::statesymbol::hash::operator( ) ( const statesymbol& ss ) const
{
   // After some trying, and looking at the distribution in the map,
   // this gives decent results:

   auto s = ss. state;
   auto t = ss. type;
   size_t h = s + 41 * t + t * t; 
   h ^= ( h >> 7 );
   return h;
}

bool
parser::statesymbol::equal_to::operator( ) ( const statesymbol& ss1,
                                                            const statesymbol& ss2 ) const
{
   return ss1. state == ss2. state && ss1. type == ss2. type;
}


// Definitions of the reduction functions:

auto parser::body0( ) -> instance<std::string, std::string, std::string>
{
#line 34 "grammar.m"
 (topsymbol(3).get<instance<std::string, std::string, std::string>>()). insert( (topsymbol(2).get<triple<std::string, std::string, std::string>>()) ); return (topsymbol(3).get<instance<std::string, std::string, std::string>>()); }

auto parser::body1( ) -> instance<std::string, std::string, std::string>
{
#line 35 "grammar.m"
 return instance< std::string, std::string, std::string > ( ); }

auto parser::body6( ) -> triple<std::string, std::string, std::string>
{
#line 44 "grammar.m"
 return triple((topsymbol(5).get<std::string>()),(topsymbol(3).get<std::string>()),(topsymbol(1).get<std::string>())); }



#line 1 "reduce"

void parser::reduce( symboltype lefttype,
               symbol::attrtype&& attr, size_t rightsize )
{
   if( debug >= 2 )
   {
      std::cout << "popping " << rightsize << " state(s) and symbol(s) "; 
      std::cout << "from the stack and reducing into " << lefttype << "\n";
   }

#if false
   // This works only if symbol has an info type: 

   std::optional< symbol::infotype > info;
      // For the first stack entry that has an info, we move it into here. 
      // For later stack entries that have an info, we merge them
      // with the first info. The idea is that info has set semantics. 

   for( auto p = symbolstack. end( ) - rightsize; 
        p != symbolstack. end( ); ++ p ) 
   {
      // If we encounter first defined, we move into info. 
      // 

      if( p -> info. has_value( )) 
      {
         if( info. has_value( ))
            info.value( ). merge( std::move( p -> info.value() ));
         else
            info = std::move( p -> info );
      }
   }
#endif 

   while( rightsize )
   {
      statestack. pop_back( );
      symbolstack. pop_back( );
      -- rightsize; 
   }
  
   // It remains to do the goto: 

   statestack. push_back( shifts. at( { statestack. back( ), lefttype } ));

#if false
   symbolstack. emplace_back( lefttype, info, std::move( attr ));
#else
   symbolstack. emplace_back( lefttype, std::move( attr ));
#endif 
}

#line 1 "parse"

symbol 
parser::parse( symboltype startsym )
{
   if( debug )
      std::cout << "Starting parser:\n";

   if( checkmovable ) 
   {
      if( ! std::is_nothrow_move_constructible<symbol> :: value )
      {
         std::cout << "class symbol is not nothrow move constructible\n";
         std::cout << "   (this causes loss of efficiency)\n"; 
         if( checkmovable > 1 )
            throw std::runtime_error( "because of this I stop" );
      }
      else
      {
         std::cout << "class symbol is nothrow move constructible\n";
         std::cout << "   (that is good)\n";
      }
   }

   if( debug >= 1 && 
          startsymbols. find( startsym ) == startsymbols. end( ))
   {
      std::cout << "startsymbol " << startsym << " is not a start symbol\n";
   }

   if( debug >= 1 && haslookahead( ))
      std::cout << "starting with lookahead = " << getlookahead( ) << "\n";

   const auto& startinfo = startsymbols. at( startsym );
   statestack. push_back( startinfo. first );
  
mainloop: 
   if( debug >= 1 ) 
      print( std::cout ); 

   if( timetosaygoodbye )
   {
      if( debug >= 2 ) 
         std::cout << "time to say goodbye!\n";

      symbol res = std::move( symbolstack. back( ));
      symbolstack. pop_back( );
      statestack. pop_back( );
      return res; 
   }
 
   size_t shift = reductioninfo. size( );  // Means undefined. 
   std::vector< size_t > redcandidates;

   const auto& redinfo = reductioninfo[ statestack. back( ) ]; 

   // If the state is non-trivial, we need a lookahead:

   if( redinfo. first != 'T' ) 
      ensurelookahead( ); 

   if( debug >= 3 && haslookahead( ))
      std::cout << "lookahead " << getlookahead( ) << "\n";

   switch( redinfo. first ) 
   {
   case 'N': 
   {
      auto p = shifts. find( 
               statesymbol( statestack.back( ), getlookahead( ). type ));
      if( p != shifts. end( ))
         shift = p -> second;
      break;
   }
   case 'D':
   {
      auto p = shifts. find(
               statesymbol( statestack.back( ), getlookahead( ). type ));
      if( p != shifts. end( ))
         shift = p -> second;
      else
         redcandidates. push_back( redinfo. second ); 
      break;
   }
   case 'H':
   {
      auto p = shifts. find(
               statesymbol( statestack. back( ), getlookahead( ). type ));
      if( p != shifts. end( ))
         shift = p -> second; 
     
      auto q = reductions. find( 
               statesymbol( statestack. back( ), getlookahead( ). type ));
      if( q != reductions. end( ))
         redcandidates = q -> second; 
      break;
   }
   case 'T':
      redcandidates. push_back( redinfo. second );
      break;   
   default:
      std::cout << redinfo.first << "\n";
      throw std::logic_error( "reduction info not recognized" );
   }
  
   if( debug >= 3 )
   { 
      if( shift != reductioninfo. size( ))
         std::cout << "shift candidate " << shift << "\n";

      if( redcandidates. size( )) 
      {
         std::cout << "reduction candidates: "; 
         for( size_t i = 0; i != redcandidates. size( ); ++ i )
            std::cout << redcandidates[i] << " ";
         std::cout << "\n";
      }
      else
         std::cout << "there are no reduction candidates\n";
   }

   // We need to find a reduction that agrees to be reduced.
   // After a reduction, we goto mainloop; 

   for( const auto& r : redcandidates ) 
   {
      if( debug >= 3 ) 
         std::cout << "trying to reduce rule " << r << "\n";

      switch(r)
      {
      case 0:
         reduce( sym_Instance, body0( ), 3 );
         goto mainloop;
         break;
      case 1:
         reduce( sym_Instance, body1( ), 0 );
         goto mainloop;
         break;
      case 2:
         reduce( sym_Newlines, std::monostate( ), 1 );
         goto mainloop;
         break;
      case 3:
         reduce( sym_Newlines, std::monostate( ), 2 );
         goto mainloop;
         break;
      case 4:
         reduce( sym_Newlines, std::monostate( ), 2 );
         goto mainloop;
         break;
      case 5:
         reduce( sym_Newlines, std::monostate( ), 3 );
         goto mainloop;
         break;
      case 6:
         reduce( sym_Triple, body6( ), 5 );
         goto mainloop;
         break;
 
      default:
         throw std::logic_error( "reducing unknown rule" );  
      }
   }

   if( shift < reductioninfo. size( ))
   {
      if( debug >= 2 ) 
         std::cout << "shifting S" << shift << "\n";

      if( checkattrtypes )
      {
         if( !lookahead. value( ). has_right_attribute( ))
         {
            std::cout << "\n";
            std::cout << "tokenizer created symbol with incorrect attribute:\n";
            std::cout << "   " << lookahead. value( ) << "\n\n";

            if( checkattrtypes >= 2 )
               throw std::logic_error( "stopping because of this" ); 
         } 
      }

      statestack. push_back( shift );
      symbolstack. push_back( std::move( lookahead. value( )));
      resetlookahead( ); 

      if( timesincelasterror < 99999999 )
         ++ timesincelasterror; 

      goto mainloop;
   }

   // We accept if the stack consists of exactly the start symbol, 
   // and we have no lookahead or the lookahead is a terminator.

   if( symbolstack. size( ) == 1 &&
       symbolstack. front( ). type == startsym &&
          ( !haslookahead( ) ||
            startinfo. second. count( getlookahead( ). type )))
   {
      if( debug >= 2 ) 
         std::cout << "we accept the input\n";

      symbol res = std::move( symbolstack. front( ));
      return res;
   }

#line 1 "startpoint"

   syntaxerror( ); 
   if( timesincelasterror < maxrecovery ) 
   {
      if( debug >= 2 )
         std::cout << "trying to recover\n";

      if( debug >= 2 )
         std::cout << "time since last error = " << timesincelasterror << "\n";

      std::vector< std::pair< size_t, size_t >> shiftrecover; 
         // We collect the levels whose state can shift the  _recover_ 
         // symbol, 
         // combined with the states that will be reached after the shifts.

      for( size_t level = 0; level != statestack. size( ); ++ level )
      {
         size_t s = statestack[ level ];

         if( reductioninfo[s]. first == 'N' ||
             reductioninfo[s]. first == 'D' ||
             reductioninfo[s]. first == 'H' )
         {
            auto p = shifts. find( statesymbol( s, sym__recover_ ));
            if( p != shifts. end( ))
               shiftrecover. push_back( std::pair( level, p -> second ));
         }
      } 

      if( debug >= 1 )
      { 
         std::cout << "possible shifts after the _recover_ symbol: {";
         for( auto p = shiftrecover. begin( ); p != shiftrecover. end( ); ++ p )
         {
            if( p != shiftrecover. begin( ))
               std::cout << ", ";
            else
               std::cout << " ";
            std::cout << ( p -> first ) << "/S" << ( p -> second );
         }
         std::cout << " }\n";
      }

      if( shiftrecover. size( ) == 0 )
      {
         if( debug >= 1 )
         {
            std::cout << "no recovering shifts found\n";
            if( haslookahead( ))
               std::cout << getlookahead( ) << "\n";
            else
               std::cout << "(there is no lookahead)\n"; 
         }

         return recover_symbol( ); 
      }

      if( debug >= 2 ) 
         std::cout << "lookahead = " << getlookahead( ) << "\n";

      // As long as we have patience left, and the lookahead is not
      // in the terminator set, we try to recover: 
 
      while( timesincelasterror < maxrecovery && 
             startinfo. second. count( getlookahead( ). type ) == 0 )
      {
         // We look in shiftrecover for the highest level on
         // which we could shift current lookahead after shifting the 
         // _recover_ symbol. 

         size_t rec = shiftrecover. size( ); 
         while( rec != 0 ) 
         { 
            -- rec; 
            size_t s = shiftrecover[ rec ]. second; 
            
            if( reductioninfo[s]. first == 'N' ||
                reductioninfo[s]. first == 'D' ||
                reductioninfo[s]. first == 'H' )
            {
               auto after = shifts. find( 
                      statesymbol( s, getlookahead( ). type ));

               if( after != shifts. end( ))
               {
                  if( debug >= 2 )
                  {
                     std::cout << rec << " is candidate\n";
                     std::cout << "recovery will be into state ";
                     std::cout << after -> second << "\n";
                  }

                  while( statestack. size() > shiftrecover[ rec ]. first + 1 )
                  {
                     statestack. pop_back( );
                     symbolstack. pop_back( );  
                  } 
                  
                  statestack. push_back(s);
                  symbolstack. push_back( recover_symbol( ));

                  statestack. push_back( after -> second );
                  symbolstack. push_back( std::move( getlookahead( ) ));

                  lookahead. reset( );

                  if( debug >= 2 ) 
                  {
                     std::cout <<  "recovery complete" << "\n";
                  }
                  timesincelasterror = 0;
                  goto mainloop; 
               } 
            }
         }

         // We throw away the current lookahead,
         // and increase the time since the last error. 
 
         if( debug >= 1 ) 
         {
            std::cout << "not yet recovered, time since last error = ";
            std::cout << timesincelasterror << "\n";
         }
         lookahead. reset( ); 
         ensurelookahead( );  

         if( timesincelasterror < 99999999 )
            ++ timesincelasterror; 
      }
   }

   // That's it. Game over. We lost.

   if( debug )
   {
      if( timesincelasterror < maxrecovery ) 
         std::cout << "reached a terminator\n";
      else
         std::cout << "recovery ran out of patience\n";
   }

#if false
   return symbol( sym__recover_,
                  std::optional< symbol::infotype > ( ) );
#else
   return symbol( sym__recover_ );
#endif

}


symbol parser::recover_symbol( ) 
{
#if false
   return symbol( sym__recover_,
                  std::optional< symbol::infotype > ( ));
#else
   return symbol( sym__recover_ );
#endif
}


size_t 
parser::match( const expectation& exp ) const
{
   size_t stackpos = symbolstack. size( );
   size_t triggerpos = exp. trigger. size( );
      // Both use predecrement consistently.

   while( triggerpos )
   {
      -- triggerpos;

      size_t skipped = 0;

   loop:
      // It is possible to write this with a while loop, but
      // the result looks terrible.

      if( stackpos == 0 || skipped > exp. trigger[ triggerpos ]. maxskip )
         return symbolstack. size( ) + 1;

      -- stackpos;
      if( !exp. trigger[ triggerpos ]. set. contains( 
                    symbolstack[ stackpos ]. type ))
      {
         ++ skipped;
         goto loop;
      }
   }

   return stackpos;
}


#if ! false 

void
parser::syntaxerror( )
{
   if( timesincelasterror + 1 <= maxtrialperiod )
   {
      timesincelasterror = 0;
      return;
   }

   size_t bestpos = symbolstack. size( ) + 1;
   auto besterror = errormessages. end( );

   for( auto p = errormessages. begin( ); p != errormessages. end( ); ++ p )
   {
      size_t pos = match(*p);
      if( pos < bestpos )
      {
         bestpos = pos;
         besterror = p;
      }
   }

   if( bestpos <= symbolstack. size( ))
   {
      std::cout << "expected " << ( besterror -> expected );
      if( haslookahead( ))
      {
         std::cout << " instead of " << getlookahead( ). type;
      }
   }
   else
   {
      if( haslookahead( ))
         std::cout << "unexpected " << getlookahead( ). type;
      else
         std::cout << "syntax error";
   }

#if false
   // If symbols have location information, we try to extract a location.
   // We first check lookahead, then backwards on the parse stack, for
   // the first symbol that has location information.

   std::optional< symbol::infotype > info;
   if( haslookahead( ))
      info = getlookahead( ). info;

   auto p = symbolstack. end( );
   while( p != symbolstack. begin( ) && !info. has_value( ))
   {
      -- p;
      if( p -> info. has_value( ))
         info = p -> info;
   }

   if( info. has_value( ))
      std::cout << " at position " << info. value( );
#endif

   std::cout << "\n";
   timesincelasterror = 0; 
}

#endif


void
parser::reset( )
{
   if( debug >= 1 )
      std::cout << "Resetting parser\n";

   statestack. clear( );
   symbolstack. clear( );

   if( debug >= 1 && haslookahead( ))
      std::cout << "lookahead still contains " << getlookahead( ) << "\n";

   timetosaygoodbye = false;
}


void 
parser::print( std::ostream& out ) const
{
   out << "Statestack: ";
   for( auto s : statestack )
      out << "S" << s << " ";
   out << "\n";

   out << "Symbolstack: ";
   for( const auto& s : symbolstack )
      out << s << "   ";
   out << "\n";
   if( timesincelasterror < 1000 )
      out << "last error was " << timesincelasterror << " symbols ago\n";

}

const std::unordered_map< symboltype, std::pair< size_t, std::unordered_set< symboltype >>> parser::startsymbols =
{
   { sym_Instance, { 0, { sym_END }} }
};

const std::vector< std::pair< char, size_t >> parser::reductioninfo =
{
   { 'D', 1 }, { 'N', 0 }, { 'N', 0 }, { 'N', 0 }, { 'N', 0 }, { 'T', 2 }, { 'N', 0 }, { 'D', 0 },
   { 'N', 0 }, { 'T', 3 }, { 'N', 0 }, { 'T', 4 }, { 'N', 0 }, { 'T', 5 }, { 'T', 6 }
};

const parser::statesymbol::map< size_t > parser::shifts =
{
   { { 12, sym_VALUE }, 14 }, { { 4, sym_VALUE }, 8 }, { { 1, sym_VALUE }, 2 }, { { 1, sym_Triple }, 3 }, { { 3, sym_COMMENT }, 6 },
   { { 2, sym_SEMICOLON }, 4 }, { { 3, sym_Newlines }, 7 }, { { 7, sym_COMMENT }, 10 }, { { 0, sym_Instance }, 1 }, { { 3, sym_NEWLINE }, 5 },
   { { 7, sym_NEWLINE }, 11 }, { { 6, sym_NEWLINE }, 9 }, { { 8, sym_SEMICOLON }, 12 }, { { 10, sym_NEWLINE }, 13 }
};

const parser::statesymbol::map< std::vector< size_t >> parser::reductions =
{
   
};


const std::vector< parser::expectation > parser::errormessages =
{

};


