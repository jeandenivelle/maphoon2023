
Dear Zolt√°n,

Thanks for your extensive speed tests. I am happy that you like
the Maphoon lexer, and that it performs well. 

I looked at Andrescu's talk yesterday. I think that the conclusion is that
destroying variant is non-trivial, because of the restricted forms
of how the destructor can be implemented. A parameter pack can be 
processed only linearly from left to right. (Like a Prolog list). 
Andrescu in the end recommends that a real implementation should have
many overloads tuned for different subcases to pick from.
I don't know how the destructor is implemented in STL.
In the audience somebody remarks that some compilers
change a linear chain of ifs into a switch when optimization is on.

As for the maphoon speed tests (ABC in your last mail), I think
the results are not that bad, even though Maphoon is obviously
50& slower than Bison. 

It may be worth looking into changing the container for storing
shifts/reductions. There are exist implementations of 
hashing (e.g. Robin Hood hashing or flat hash map) 
whose authors claim that they 3 times faster than standard STL hashing.
Probably one can be picked without much programming effort.
I thought that flat_map (to be added in C++23) would solve the problem,
but it appears to be something completely different. It is similar
to flatmap that I use in the lexer. 

One can also look at the requirements of Maphoon. 
Contrary to std::unordered_map, Maphoon never deletes, 
and it only inserts during initializaion, after which the 
map never changes anymore. 

Thanks again for your extensive testing, I will start looking
into the automaton minimization issue.

Hans

P.S.

I cannot find your mail where observe that minimalization changes
behavior of the automata, only this:

- In acceptor.h my compiler complained that applying the unary minus operator to an unsigned value will remain unsigned.
- In flatmap.h, my runtime checks complained for a 2-element flatmap begin()+3 is out-of-bounds. So I have re-arranged the condition in the while loop.


