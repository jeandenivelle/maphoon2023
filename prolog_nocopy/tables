filereader( grammar.m, 248, 0 ) : %end{0A}
lookahead: eof/4

symbolcodebuilder:

code for .h:
from file grammar.m, line 31 :
   31 :    #include "term.h" 
   32 :    #include "syntax.h" 
   33 :    #include "listconstr.h" 


namespace:
   prolog

infotype: void

code for .cpp:
from file grammar.m, line 36 :
   36 :    
   37 :      {void} 
   38 :      {print_attr}( {const} {std}::{vector}< {prolog}::{term} > & {vect}, {std}::{ostream}& {out} ) 
   39 :      {
   40 :         {print_range}( {vect}. {begin}( ), {vect}. {end}( ), '{', '}', {out} );
   41 :      }
   42 :   
   43 :      {void} 
   44 :      {print_attr}( {const} {prolog}::{term}& {trm}, {std}::{ostream}& {out} )
   45 :      { 
   46 :         {out} << {trm}; 
   47 :      } 
   48 :   


declared attributes:
   COMMA : void
   Prefix : opdef
   SomeTerms : std::vector<term>
   INTEGER : bigint
   DOUBLE : double
   TERMINATOR : void
   VARIABLE : std::string
   RSQBRACKET : void
   BAR : void
   LSQBRACKET : void
   Postfix : opdef
   COMMENT : void
   Infix : opdef
   Term : term
   OneTerm : term
   QUOTEDIDENTIFIER : std::string
   ListEnd : term
   MaybeTerms : std::vector<term>
   Start : void
   GLUEDQUOTEDIDENTIFIER : std::string
   ERROR : void
   GLUEDIDENTIFIER : std::string
   WHITESPACE : void
   LPAR : void
   RPAR : void
   EOF : void
   IDENTIFIER : std::string


parsercodebuilder:

namespace =      prolog
source =          from file , line 141 :
   141 :    {tok}. {get}( {syntdefs} ); 

parameters:
   tok :       tokenizer
   vs :       varstore<term>
   syntdefs :       syntax
   list :       listconstr

code for .h:
from file grammar.m, line 50 :
   50 :    #include "tokenizer.h" 
   51 :    #include "../calculator/varstore.h" 


code for .cpp:
from file grammar.m, line 53 :
   53 :    
   54 :   
   55 :   {namespace}
   56 :   {
   57 :   
   58 :      {bool} {canbeprefix}( {const} {syntax}& {syntdefs}, {const} {symbol}& {sym} )
   59 :      {
   60 :         {std}::{cout} << "can be prefix " << {sym} << " ?\n";
   61 :         {if}( {sym}. {type} != {sym_IDENTIFIER} ) {return} {false};
   62 :         {const} {auto}& {s} = {sym}. {get}< {std}::{string} > ( );
   63 :         {return} {syntdefs}. {hasprefixdef}({s}); 
   64 :      }
   65 :   
   66 :      {bool} {canbeinfix}( {const} {syntax}& {syntdefs}, {const} {symbol}& {sym} )
   67 :      {
   68 :         {std}::{cout} << "can be infix " << {sym} << " ?\n";
   69 :         {if}( {sym}. {type} != {sym_IDENTIFIER} ) {return} {false};
   70 :         {const} {auto}& {s} = {sym}. {get}< {std}::{string} > ( );    
   71 :         {return} {syntdefs}. {hasinfixdef}({s}); 
   72 :      } 
   73 :   
   74 :      {bool} {canbepostfix}( {const} {syntax}& {syntdefs}, {const} {symbol}& {sym} )
   75 :      {
   76 :         {std}::{cout} << "can be postfix " << {sym} << " ?\n";
   77 :         {if}( {sym}. {type} != {sym_IDENTIFIER} ) {return} {false};
   78 :         {const} {auto}& {s} = {sym}. {get}< {std}::{string} > ( );    
   79 :         {return} {syntdefs}. {haspostfixdef}({s});
   80 :      } 
   81 :   
   82 :      {bool} {canstartterm}( {const} {symbol}& {sym} )
   83 :      {
   84 :         {std}::{cout} << "can start term " << {sym} << "\n";
   85 :         {return} {sym}.{type} == {sym_IDENTIFIER} ||
   86 :                {sym}.{type} == {sym_GLUEDIDENTIFIER} ||
   87 :                {sym}.{type} == {sym_QUOTEDIDENTIFIER} ||
   88 :                {sym}.{type} == {sym_GLUEDQUOTEDIDENTIFIER} || 
   89 :                {sym}.{type} == {sym_LPAR} ||
   90 :                {sym}.{type} == {sym_LSQBRACKET} ||
   91 :                {sym}.{type} == {sym_VARIABLE} ||
   92 :                {sym}.{type} == {sym_INTEGER} ||
   93 :                {sym}.{type} == {sym_DOUBLE};
   94 :      }
   95 :   
   96 :      {short} {int} {canreduce}( {const} {syntax}& {syntdefs},
   97 :                           {const} {opdef}& {op}, {const} {symbol}& {sym} )
   98 :      {
   99 :         {std}::{cout} << "deciding priorities between " << {op} << " and " << {sym} << "\n";
   100 :         {if}( {sym}. {type} != {sym_IDENTIFIER} )
   101 :            {return} 1;   // reduce.
   102 :   
   103 :         {const} {std}::{string}& {str} = {sym}. {get}< {std}::{string} > ( );
   104 :   
   105 :         // We do not really know what to do when there are
   106 :         // conflicting priorities. I suppose it should not happen. 
   107 :   
   108 :         {if}( {syntdefs}. {haspostfixdef}( {str} ))
   109 :         { 
   110 :            {auto} {op2} = {syntdefs}. {postfixdef}( {str} );
   111 :            {auto} {dir} = {op}. {decide}( {op2} );
   112 :            {if}( {dir} == -1 ) {return} 1;
   113 :            {if}( {dir} == 1 ) {return} 0;
   114 :            {return} -1;
   115 :         }
   116 :   
   117 :         {if}( {syntdefs}. {hasinfixdef}( {str} )) 
   118 :         { 
   119 :            {auto} {op2} = {syntdefs}. {infixdef}( {str} );
   120 :            {auto} {dir} = {op}. {decide}( {op2} );
   121 :            {if}( {dir} == -1 ) {return} 1;
   122 :            {if}( {dir} == 1 ) {return} 0;
   123 :            {return} -1;
   124 :         }
   125 :   
   126 :         {return} 1;
   127 :      }
   128 :   }
   129 :   


Start Symbols with their Lookahead Sets:
   Start : { EOF }


Rules:

(0)   Start  =>  OneTerm TERMINATOR
(1)   OneTerm  =>  Term
(2)   Term  =>  VARIABLE
(3)   Term  =>  DOUBLE
(4)   Term  =>  INTEGER
(5)   Term  =>  IDENTIFIER
(6)   Term  =>  QUOTEDIDENTIFIER
(7)   Term  =>  GLUEDIDENTIFIER LPAR MaybeTerms RPAR
(8)   Term  =>  GLUEDQUOTEDIDENTIFIER LPAR MaybeTerms RPAR
(9)   Term  =>  Prefix Term
(10)   Term  =>  Term Infix Term
(11)   Term  =>  Term Postfix
(12)   Term  =>  LPAR Term RPAR
(13)   Term  =>  LSQBRACKET MaybeTerms ListEnd RSQBRACKET
(14)   MaybeTerms  =>  
(15)   MaybeTerms  =>  SomeTerms
(16)   SomeTerms  =>  Term
(17)   SomeTerms  =>  SomeTerms COMMA Term
(18)   ListEnd  =>  
(19)   ListEnd  =>  BAR Term
(20)   Prefix  =>  IDENTIFIER
(21)   Infix  =>  IDENTIFIER
(22)   Postfix  =>  IDENTIFIER



Reduction Sequences:
   Term/1, Prefix/0
   Postfix/1, Infix/0

#1: reduction( t : 0 )
from file grammar.m, line 147 :
   147 :    {timetosaygoodbye} = {true}; {return} {t}; 

#2: reduction( v : 0 )
from file grammar.m, line 150 :
   150 :    {return} {new} {variable}({v}); 

#3: reduction( d : 0 )
from file grammar.m, line 152 :
   152 :    {return} {new} {constant}< {double} > ({d}); 

#4: reduction( i : 0 )
from file grammar.m, line 154 :
   154 :    {return} {new} {constant}< {bigint} > ({i}); 

#5: reduction( id : 0 )
from file grammar.m, line 156 :
   156 :    {return} {new} {functional}( {function}( {id}, 0 )); 

#6: reduction( id : 0 )
from file grammar.m, line 158 :
   158 :    {return} {new} {functional}( {function}( {id}, 0 )); 

#7: reduction( args : 2, id : 0 )
from file grammar.m, line 161 :
   161 :    {size_t} {ar} = {args}. {size}( );
   162 :           {return} {new} {functional}( {function}( {id}, {ar} ), {std}::{move}( {args} ));
   163 :         

#8: reduction( args : 2, id : 0 )
from file grammar.m, line 166 :
   166 :    {size_t} {ar} = {args}. {size}( );
   167 :           {return} {new} {functional}( {function}( {id}, {ar} ), {std}::{move}( {args} ));
   168 :         

#9: reduction( t : 1, op : 0 )
? from file grammar.m, line 172 :
   172 :    {return} {canreduce}( {syntdefs}, {op}, {lookahead}. {value}( )); 

from file grammar.m, line 174 :
   174 :    {return} {new} {functional}( {function}( {op}. {str}, 1 ), { {t} } ); 

#10: reduction( t2 : 2, op : 1, t1 : 0 )
? from file grammar.m, line 178 :
   178 :    {return} {canreduce}( {syntdefs}, {op}, {lookahead}. {value}( )); 

from file grammar.m, line 180 :
   180 :    {return} {new} {functional}( {function}( {op}. {str}, 2 ), { {t1}, {t2} } ); 

#11: reduction( op : 1, t : 0 )
from file grammar.m, line 184 :
   184 :    {return} {new} {functional}( {function}( {op}. {str}, 1 ), { {t} } ); 

#12: reduction( t : 1 )
from file grammar.m, line 186 :
   186 :    {return} {t}; 

#13: reduction( end : 2, args : 1 )
from file grammar.m, line 189 :
   189 :    {auto} {res} = {end};
   190 :        {size_t} {i} = {args}. {size}( );
   191 :        {while}( {i} -- )
   192 :           {res} = {new} {functional}( {list}. {cons}, { {args}[{i}], {res} } );
   193 :        {return} {res};    
   194 :      

#14: reduction
from file grammar.m, line 198 :
   198 :    {return} {std}::{vector}<{term}> ( );         /* empty rhs. */  

#15: reduction( terms : 0 )
from file grammar.m, line 199 :
   199 :    {return} {terms}; 

#16: reduction( t : 0 )
? from file grammar.m, line 205 :
   205 :    {return} !{canbeinfix}( {syntdefs}, {lookahead}. {value}( )) &&
   206 :               !{canbepostfix}( {syntdefs}, {lookahead}. {value}( )); 
   207 :      

from file grammar.m, line 209 :
   209 :    {auto} {res} = {std}::{vector}< {term} > ( ); {res}. {push_back}({t}); {return} {res}; 

#17: reduction( onemore : 2, some : 0 )
? from file grammar.m, line 214 :
   214 :    {return} !{canbeinfix}( {syntdefs}, {lookahead}. {value}( )) &&
   215 :               !{canbepostfix}( {syntdefs}, {lookahead}. {value}( )); 
   216 :      

from file grammar.m, line 218 :
   218 :    {some}. {push_back}( {onemore} ); {return} {some}; 

#18: reduction
from file grammar.m, line 222 :
   222 :    {return} {new} {functional}( {list}. {nil} ); 

#19: reduction( t : 1 )
from file grammar.m, line 224 :
   224 :    {return} {t}; 

#20: reduction( id : 0 )
? from file grammar.m, line 229 :
   229 :    {return} {syntdefs}. {hasprefixdef}( {id} ) && {canstartterm}( {lookahead}. {value}( )); 

from file grammar.m, line 231 :
   231 :    {return} {syntdefs}. {prefixdef}({id}); 

#21: reduction( id : 0 )
? from file grammar.m, line 236 :
   236 :    {return} {syntdefs}. {hasinfixdef}({id}) && {canstartterm}( {lookahead}. {value}( )); 

from file grammar.m, line 238 :
   238 :    {return} {syntdefs}. {infixdef}({id}); 

#22: reduction( id : 0 )
? from file grammar.m, line 243 :
   243 :    {return} {syntdefs}. {haspostfixdef}({id}); 

from file grammar.m, line 245 :
   245 :    {return} {syntdefs}. {postfixdef}({id}); 


input was read succesfully

warning: the following symbols have been declared, but do not occur in the grammar:
   { WHITESPACE, ERROR, _recover_, COMMENT }
starting closure
all states have been generated
adding reductions
ending closure

Parsetable:
====================================

Initial States:
   Start : state 0


state 0:
   Start =>  # OneTerm TERMINATOR  /  { EOF }

Shifts:
   Start :  36
   DOUBLE :  12
   INTEGER :  11
   Term :  10
   IDENTIFIER :  9
   GLUEDIDENTIFIER :  8
   LSQBRACKET :  7
   VARIABLE :  6
   OneTerm :  5
   Prefix :  4
   GLUEDQUOTEDIDENTIFIER :  3
   QUOTEDIDENTIFIER :  2
   LPAR :  1


state 1:
   Term =>  LPAR # Term RPAR  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Shifts:
   VARIABLE :  6
   IDENTIFIER :  9
   GLUEDIDENTIFIER :  8
   LSQBRACKET :  7
   Term :  13
   INTEGER :  11
   DOUBLE :  12
   LPAR :  1
   Prefix :  4
   GLUEDQUOTEDIDENTIFIER :  3
   QUOTEDIDENTIFIER :  2


state 2:
   Term =>  QUOTEDIDENTIFIER #  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Reductions:
   TERMINATOR :  6
   Infix :  6
   BAR :  6
   IDENTIFIER :  6
   Postfix :  6
   RPAR :  6
   RSQBRACKET :  6
   ListEnd :  6
   COMMA :  6


state 3:
   Term =>  GLUEDQUOTEDIDENTIFIER # LPAR MaybeTerms RPAR  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Shifts:
   LPAR :  14


state 4:
   Term =>  Prefix # Term  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Shifts:
   VARIABLE :  6
   IDENTIFIER :  9
   GLUEDIDENTIFIER :  8
   LSQBRACKET :  7
   Term :  15
   INTEGER :  11
   DOUBLE :  12
   Prefix :  4
   GLUEDQUOTEDIDENTIFIER :  3
   QUOTEDIDENTIFIER :  2
   LPAR :  1


state 5:
   Start =>  OneTerm # TERMINATOR  /  { EOF }

Shifts:
   TERMINATOR :  16


state 6:
   Term =>  VARIABLE #  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Reductions:
   TERMINATOR :  2
   Infix :  2
   BAR :  2
   IDENTIFIER :  2
   Postfix :  2
   RPAR :  2
   RSQBRACKET :  2
   ListEnd :  2
   COMMA :  2


state 7:
   MaybeTerms =>  #  /  { BAR, ListEnd, RSQBRACKET }
   Term =>  LSQBRACKET # MaybeTerms ListEnd RSQBRACKET  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Shifts:
   QUOTEDIDENTIFIER :  2
   GLUEDQUOTEDIDENTIFIER :  3
   Prefix :  4
   MaybeTerms :  19
   GLUEDIDENTIFIER :  8
   LSQBRACKET :  7
   Term :  18
   DOUBLE :  12
   INTEGER :  11
   IDENTIFIER :  9
   VARIABLE :  6
   SomeTerms :  17
   LPAR :  1

Reductions:
   RSQBRACKET :  14
   ListEnd :  14
   BAR :  14


state 8:
   Term =>  GLUEDIDENTIFIER # LPAR MaybeTerms RPAR  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Shifts:
   LPAR :  20


state 9:
   Term =>  IDENTIFIER #  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }
   Prefix =>  IDENTIFIER #  /  { VARIABLE, IDENTIFIER, QUOTEDIDENTIFIER, GLUEDQUOTEDIDENTIFIER, Prefix, LPAR, GLUEDIDENTIFIER, LSQBRACKET, DOUBLE, INTEGER, Term }

Reductions:
   INTEGER :  20
   DOUBLE :  20
   GLUEDIDENTIFIER :  20
   LPAR :  20
   COMMA :  5
   RSQBRACKET :  5
   RPAR :  5
   Postfix :  5
   IDENTIFIER :  20, 5
   LSQBRACKET :  20
   BAR :  5
   Term :  20
   Infix :  5
   VARIABLE :  20
   TERMINATOR :  5
   QUOTEDIDENTIFIER :  20
   ListEnd :  5
   GLUEDQUOTEDIDENTIFIER :  20
   Prefix :  20


state 10:
   Term =>  Term # Infix Term  /  { Postfix, IDENTIFIER, Infix, TERMINATOR }
   Term =>  Term # Postfix  /  { Postfix, IDENTIFIER, Infix, TERMINATOR }
   OneTerm =>  Term #  /  { TERMINATOR }

Shifts:
   Postfix :  23
   Infix :  22
   IDENTIFIER :  21

Reductions:
   TERMINATOR :  1


state 11:
   Term =>  INTEGER #  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Reductions:
   TERMINATOR :  4
   Infix :  4
   BAR :  4
   IDENTIFIER :  4
   Postfix :  4
   RPAR :  4
   RSQBRACKET :  4
   ListEnd :  4
   COMMA :  4


state 12:
   Term =>  DOUBLE #  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Reductions:
   TERMINATOR :  3
   Infix :  3
   BAR :  3
   IDENTIFIER :  3
   Postfix :  3
   RPAR :  3
   RSQBRACKET :  3
   ListEnd :  3
   COMMA :  3


state 13:
   Term =>  Term # Infix Term  /  { Postfix, IDENTIFIER, Infix, RPAR }
   Term =>  Term # Postfix  /  { Postfix, IDENTIFIER, Infix, RPAR }
   Term =>  LPAR Term # RPAR  /  { RPAR, RSQBRACKET, ListEnd, COMMA, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Shifts:
   RPAR :  24
   Postfix :  23
   Infix :  22
   IDENTIFIER :  21


state 14:
   MaybeTerms =>  #  /  { RPAR }
   Term =>  GLUEDQUOTEDIDENTIFIER LPAR # MaybeTerms RPAR  /  { ListEnd, COMMA, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Shifts:
   QUOTEDIDENTIFIER :  2
   Prefix :  4
   GLUEDQUOTEDIDENTIFIER :  3
   MaybeTerms :  25
   GLUEDIDENTIFIER :  8
   LSQBRACKET :  7
   Term :  18
   DOUBLE :  12
   INTEGER :  11
   IDENTIFIER :  9
   VARIABLE :  6
   SomeTerms :  17
   LPAR :  1

Reductions:
   RPAR :  14


state 15:
   Term =>  Term # Infix Term  /  { ListEnd, COMMA, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }
   Term =>  Term # Postfix  /  { ListEnd, COMMA, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }
   Term =>  Prefix Term #  /  { ListEnd, COMMA, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Shifts:
   IDENTIFIER :  21
   Postfix :  23
   Infix :  22

Reductions:
   TERMINATOR :  9
   Infix :  9
   BAR :  9
   IDENTIFIER :  9
   Postfix :  9
   RPAR :  9
   RSQBRACKET :  9
   COMMA :  9
   ListEnd :  9


state 16:
   Start =>  OneTerm TERMINATOR #  /  { EOF }

Reductions:
   EOF :  0


state 17:
   SomeTerms =>  SomeTerms # COMMA Term  /  { RPAR, RSQBRACKET, ListEnd, COMMA, BAR }
   MaybeTerms =>  SomeTerms #  /  { BAR, ListEnd, RPAR, RSQBRACKET }

Shifts:
   COMMA :  26

Reductions:
   RSQBRACKET :  15
   RPAR :  15
   ListEnd :  15
   BAR :  15


state 18:
   Term =>  Term # Infix Term  /  { RPAR, RSQBRACKET, ListEnd, COMMA, Postfix, IDENTIFIER, Infix, BAR }
   Term =>  Term # Postfix  /  { RPAR, RSQBRACKET, ListEnd, COMMA, Postfix, IDENTIFIER, Infix, BAR }
   SomeTerms =>  Term #  /  { RPAR, RSQBRACKET, ListEnd, COMMA, BAR }

Shifts:
   Postfix :  23
   Infix :  22
   IDENTIFIER :  21

Reductions:
   BAR :  16
   COMMA :  16
   ListEnd :  16
   RSQBRACKET :  16
   RPAR :  16


state 19:
   ListEnd =>  #  /  { RSQBRACKET }
   Term =>  LSQBRACKET MaybeTerms # ListEnd RSQBRACKET  /  { ListEnd, COMMA, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Shifts:
   ListEnd :  28
   BAR :  27

Reductions:
   RSQBRACKET :  18


state 20:
   MaybeTerms =>  #  /  { RPAR }
   Term =>  GLUEDIDENTIFIER LPAR # MaybeTerms RPAR  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Shifts:
   QUOTEDIDENTIFIER :  2
   GLUEDQUOTEDIDENTIFIER :  3
   Prefix :  4
   MaybeTerms :  29
   Term :  18
   DOUBLE :  12
   INTEGER :  11
   IDENTIFIER :  9
   GLUEDIDENTIFIER :  8
   LSQBRACKET :  7
   VARIABLE :  6
   SomeTerms :  17
   LPAR :  1

Reductions:
   RPAR :  14


state 21:
   Postfix =>  IDENTIFIER #  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }
   Infix =>  IDENTIFIER #  /  { VARIABLE, IDENTIFIER, QUOTEDIDENTIFIER, GLUEDQUOTEDIDENTIFIER, Prefix, LPAR, GLUEDIDENTIFIER, LSQBRACKET, DOUBLE, INTEGER, Term }

Reductions:
   INTEGER :  21
   DOUBLE :  21
   GLUEDIDENTIFIER :  21
   LPAR :  21
   COMMA :  22
   RSQBRACKET :  22
   RPAR :  22
   Postfix :  22
   IDENTIFIER :  21, 22
   LSQBRACKET :  21
   BAR :  22
   Term :  21
   Infix :  22
   VARIABLE :  21
   TERMINATOR :  22
   QUOTEDIDENTIFIER :  21
   ListEnd :  22
   GLUEDQUOTEDIDENTIFIER :  21
   Prefix :  21


state 22:
   Term =>  Term Infix # Term  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Shifts:
   VARIABLE :  6
   IDENTIFIER :  9
   GLUEDIDENTIFIER :  8
   LSQBRACKET :  7
   Term :  30
   INTEGER :  11
   DOUBLE :  12
   LPAR :  1
   Prefix :  4
   GLUEDQUOTEDIDENTIFIER :  3
   QUOTEDIDENTIFIER :  2


state 23:
   Term =>  Term Postfix #  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Reductions:
   TERMINATOR :  11
   Infix :  11
   BAR :  11
   IDENTIFIER :  11
   Postfix :  11
   RPAR :  11
   RSQBRACKET :  11
   ListEnd :  11
   COMMA :  11


state 24:
   Term =>  LPAR Term RPAR #  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Reductions:
   TERMINATOR :  12
   Infix :  12
   BAR :  12
   IDENTIFIER :  12
   Postfix :  12
   RPAR :  12
   RSQBRACKET :  12
   ListEnd :  12
   COMMA :  12


state 25:
   Term =>  GLUEDQUOTEDIDENTIFIER LPAR MaybeTerms # RPAR  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Shifts:
   RPAR :  31


state 26:
   SomeTerms =>  SomeTerms COMMA # Term  /  { RPAR, RSQBRACKET, ListEnd, COMMA, BAR }

Shifts:
   VARIABLE :  6
   IDENTIFIER :  9
   GLUEDIDENTIFIER :  8
   LSQBRACKET :  7
   Term :  32
   INTEGER :  11
   DOUBLE :  12
   LPAR :  1
   Prefix :  4
   GLUEDQUOTEDIDENTIFIER :  3
   QUOTEDIDENTIFIER :  2


state 27:
   ListEnd =>  BAR # Term  /  { RSQBRACKET }

Shifts:
   VARIABLE :  6
   IDENTIFIER :  9
   QUOTEDIDENTIFIER :  2
   Prefix :  4
   GLUEDQUOTEDIDENTIFIER :  3
   GLUEDIDENTIFIER :  8
   LSQBRACKET :  7
   Term :  33
   INTEGER :  11
   DOUBLE :  12
   LPAR :  1


state 28:
   Term =>  LSQBRACKET MaybeTerms ListEnd # RSQBRACKET  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Shifts:
   RSQBRACKET :  34


state 29:
   Term =>  GLUEDIDENTIFIER LPAR MaybeTerms # RPAR  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Shifts:
   RPAR :  35


state 30:
   Term =>  Term # Postfix  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }
   Term =>  Term # Infix Term  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }
   Term =>  Term Infix Term #  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Shifts:
   Infix :  22
   Postfix :  23
   IDENTIFIER :  21

Reductions:
   TERMINATOR :  10
   Infix :  10
   BAR :  10
   IDENTIFIER :  10
   Postfix :  10
   RPAR :  10
   RSQBRACKET :  10
   ListEnd :  10
   COMMA :  10


state 31:
   Term =>  GLUEDQUOTEDIDENTIFIER LPAR MaybeTerms RPAR #  /  { ListEnd, COMMA, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Reductions:
   TERMINATOR :  8
   Infix :  8
   BAR :  8
   IDENTIFIER :  8
   Postfix :  8
   RPAR :  8
   RSQBRACKET :  8
   COMMA :  8
   ListEnd :  8


state 32:
   Term =>  Term # Infix Term  /  { RPAR, RSQBRACKET, ListEnd, COMMA, Postfix, IDENTIFIER, Infix, BAR }
   Term =>  Term # Postfix  /  { RPAR, RSQBRACKET, ListEnd, COMMA, Postfix, IDENTIFIER, Infix, BAR }
   SomeTerms =>  SomeTerms COMMA Term #  /  { RPAR, RSQBRACKET, ListEnd, COMMA, BAR }

Shifts:
   Postfix :  23
   Infix :  22
   IDENTIFIER :  21

Reductions:
   BAR :  17
   COMMA :  17
   ListEnd :  17
   RSQBRACKET :  17
   RPAR :  17


state 33:
   ListEnd =>  BAR Term #  /  { RSQBRACKET }
   Term =>  Term # Infix Term  /  { Postfix, IDENTIFIER, Infix, RSQBRACKET }
   Term =>  Term # Postfix  /  { Postfix, IDENTIFIER, Infix, RSQBRACKET }

Shifts:
   Postfix :  23
   Infix :  22
   IDENTIFIER :  21

Reductions:
   RSQBRACKET :  19


state 34:
   Term =>  LSQBRACKET MaybeTerms ListEnd RSQBRACKET #  /  { ListEnd, COMMA, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Reductions:
   TERMINATOR :  13
   Infix :  13
   BAR :  13
   IDENTIFIER :  13
   Postfix :  13
   RPAR :  13
   RSQBRACKET :  13
   COMMA :  13
   ListEnd :  13


state 35:
   Term =>  GLUEDIDENTIFIER LPAR MaybeTerms RPAR #  /  { COMMA, ListEnd, RSQBRACKET, RPAR, Postfix, IDENTIFIER, BAR, Infix, TERMINATOR }

Reductions:
   TERMINATOR :  7
   Infix :  7
   BAR :  7
   IDENTIFIER :  7
   Postfix :  7
   RPAR :  7
   RSQBRACKET :  7
   ListEnd :  7
   COMMA :  7


state 36:




note that there are warnings

symbol definition will be put in ./symbol.h and ./symbol.cpp

opening file ../idee.x
parser definition will be put in ./parser.h and ./parser.cpp

