
# Automatically generated Makefile
# Makefile-generator programmed by Hans de Nivelle, 2002


Flags = -Wpedantic -pedantic-errors -std=c++20
CPP = g++


prolog : Makefile   prolog.o function.o bigint.o functional.o opdef.o syntax.o symbol.o tokenizer.o ../filereader.o ../../lexing2022/stateset.o ../../lexing2022/partition.o parser.o 
	$(CPP) $(Flags) -o prolog   prolog.o function.o bigint.o functional.o opdef.o syntax.o symbol.o tokenizer.o ../filereader.o ../../lexing2022/stateset.o ../../lexing2022/partition.o parser.o 

prolog.o : Makefile   prolog.cpp   parser.h symbol.h term.h ../../easycomp2022a/util/unique_ptr.h ../../easycomp2022a/util/hashbuilder.h variable.h constant.h bigint.h functional.h function.h syntax.h opdef.h listconstr.h tokenizer.h ../filereader.h ../../lexing2022/includes.h ../../lexing2022/acceptor.h ../../lexing2022/flatmap.h ../../lexing2022/state.h ../../lexing2022/minmax.h ../../lexing2022/classifier.h ../../lexing2022/algorithms.h ../../lexing2022/stateset.h ../../lexing2022/minimization.h ../../lexing2022/partition.h ../../lexing2022/reachableclasses.h ../../lexing2022/generators.h ../../lexing2022/indentation.h ../../lexing2022/deterministic.h ../calculator/varstore.h 
	$(CPP) -c $(Flags) prolog.cpp -o  prolog.o


function.o : Makefile   function.cpp   function.h 
	$(CPP) -c $(Flags) function.cpp -o  function.o


bigint.o : Makefile   bigint.cpp   bigint.h 
	$(CPP) -c $(Flags) bigint.cpp -o  bigint.o


functional.o : Makefile   functional.cpp   functional.h term.h ../../easycomp2022a/util/unique_ptr.h ../../easycomp2022a/util/hashbuilder.h variable.h constant.h bigint.h function.h 
	$(CPP) -c $(Flags) functional.cpp -o  functional.o


opdef.o : Makefile   opdef.cpp   opdef.h 
	$(CPP) -c $(Flags) opdef.cpp -o  opdef.o


syntax.o : Makefile   syntax.cpp   syntax.h opdef.h 
	$(CPP) -c $(Flags) syntax.cpp -o  syntax.o


symbol.o : Makefile   symbol.cpp   symbol.h term.h ../../easycomp2022a/util/unique_ptr.h ../../easycomp2022a/util/hashbuilder.h variable.h constant.h bigint.h functional.h function.h syntax.h opdef.h listconstr.h 
	$(CPP) -c $(Flags) symbol.cpp -o  symbol.o


tokenizer.o : Makefile   tokenizer.cpp   DFA.h tokenizer.h ../filereader.h ../../lexing2022/includes.h ../../lexing2022/acceptor.h ../../lexing2022/flatmap.h ../../lexing2022/state.h ../../lexing2022/minmax.h ../../lexing2022/classifier.h ../../lexing2022/algorithms.h ../../lexing2022/stateset.h ../../lexing2022/minimization.h ../../lexing2022/partition.h ../../lexing2022/reachableclasses.h ../../lexing2022/generators.h ../../lexing2022/indentation.h ../../lexing2022/deterministic.h symbol.h term.h ../../easycomp2022a/util/unique_ptr.h ../../easycomp2022a/util/hashbuilder.h variable.h constant.h bigint.h functional.h function.h syntax.h opdef.h listconstr.h 
	$(CPP) -c $(Flags) tokenizer.cpp -o  tokenizer.o


../filereader.o : Makefile   ../filereader.cpp   ../filereader.h 
	$(CPP) -c $(Flags) ../filereader.cpp -o  ../filereader.o


../../lexing2022/stateset.o : Makefile   ../../lexing2022/stateset.cpp   ../../lexing2022/stateset.h ../../lexing2022/state.h 
	$(CPP) -c $(Flags) ../../lexing2022/stateset.cpp -o  ../../lexing2022/stateset.o


../../lexing2022/partition.o : Makefile   ../../lexing2022/partition.cpp   ../../lexing2022/partition.h ../../lexing2022/stateset.h ../../lexing2022/state.h 
	$(CPP) -c $(Flags) ../../lexing2022/partition.cpp -o  ../../lexing2022/partition.o


parser.o : Makefile   parser.cpp   parser.h symbol.h term.h ../../easycomp2022a/util/unique_ptr.h ../../easycomp2022a/util/hashbuilder.h variable.h constant.h bigint.h functional.h function.h syntax.h opdef.h listconstr.h tokenizer.h ../filereader.h ../../lexing2022/includes.h ../../lexing2022/acceptor.h ../../lexing2022/flatmap.h ../../lexing2022/state.h ../../lexing2022/minmax.h ../../lexing2022/classifier.h ../../lexing2022/algorithms.h ../../lexing2022/stateset.h ../../lexing2022/minimization.h ../../lexing2022/partition.h ../../lexing2022/reachableclasses.h ../../lexing2022/generators.h ../../lexing2022/indentation.h ../../lexing2022/deterministic.h ../calculator/varstore.h 
	$(CPP) -c $(Flags) parser.cpp -o  parser.o


