
// Parser generated by Maphoon 2022.
// Written by Hans de Nivelle, March 2021-May 2022.
// See the licence that was included with the code.

#include "parser.h"



size_t 
parsing::parser::statesymbol::hash::operator( ) ( const statesymbol& ss ) const
{
   // After some trying, and looking at the distribution in the map,
   // this gives decent results:

   auto s = ss. state;
   auto t = ss. type;
   size_t h = s + 41 * t + t * t; 
   h ^= ( h >> 7 );
   return h;
}

bool
parsing::parser::statesymbol::equal_to::operator( ) ( const statesymbol& ss1,
                                                            const statesymbol& ss2 ) const
{
   return ss1. state == ss2. state && ss1. type == ss2. type;
}


// Definitions of the reduction functions:

auto parsing::parser::body0( ) -> std::pair<turingmachine, std::vector<std::string> >
{
#line 78 "grammar.m"
 return { turingmachine( std::move( (topsymbol(12).get<state>()) ), std::move( (topsymbol(9).get<std::set<state>>()) ),
                          std::move( (topsymbol(15).get<std::set<char>>()) ), (topsymbol(6).get<char>()), std::move( (topsymbol(2).get<turingmachine::deltatype>()) )), (topsymbol(1).get<std::vector<std::string>>()) }; }

auto parsing::parser::body1( ) -> std::set<char>
{
#line 83 "grammar.m"
 return std::set<char> ( ); }

auto parsing::parser::body2( ) -> std::set<char>
{
#line 84 "grammar.m"
 (topsymbol(2).get<std::set<char>>()). insert((topsymbol(1).get<char>())); return (topsymbol(2).get<std::set<char>>()); }

auto parsing::parser::body3( ) -> std::set<state>
{
#line 88 "grammar.m"
 return std::set<state> ( ); }

auto parsing::parser::body4( ) -> std::set<state>
{
#line 89 "grammar.m"
 (topsymbol(2).get<std::set<state>>()). insert((topsymbol(1).get<state>())); return (topsymbol(2).get<std::set<state>>()); }

auto parsing::parser::body5( ) -> turingmachine::deltatype
{
#line 93 "grammar.m"
 return turingmachine::deltatype( ); }

auto parsing::parser::body6( ) -> turingmachine::deltatype
{
#line 95 "grammar.m"
 (topsymbol(2).get<turingmachine::deltatype>()). insert( std::move((topsymbol(1).get<std::pair<lhs, rhs>>()))); return (topsymbol(2).get<turingmachine::deltatype>()); }

auto parsing::parser::body7( ) -> std::pair<lhs, rhs>
{
#line 98 "grammar.m"
 return std::pair( (topsymbol(4).get<lhs>()), (topsymbol(2).get<rhs>()) ); }

auto parsing::parser::body8( ) -> lhs
{
#line 101 "grammar.m"
 return lhs((topsymbol(3).get<state>()),(topsymbol(1).get<char>())); }

auto parsing::parser::body9( ) -> rhs
{
#line 104 "grammar.m"
 return rhs((topsymbol(5).get<state>()),(topsymbol(3).get<std::string>()),(topsymbol(1).get<int>())); }

auto parsing::parser::body10( ) -> rhs
{
#line 105 "grammar.m"
 return rhs( (topsymbol(5).get<state>()),(topsymbol(3).get<std::string>()),(topsymbol(1).get<int>()) ); }

auto parsing::parser::body11( ) -> std::string
{
#line 108 "grammar.m"
 std::string s = {(topsymbol(1).get<char>())}; return s; }

auto parsing::parser::body12( ) -> std::string
{
#line 109 "grammar.m"
 return (topsymbol(1).get<std::string>()); }

auto parsing::parser::body13( ) -> std::string
{
#line 110 "grammar.m"
 return std::string( ); }

auto parsing::parser::body14( ) -> state
{
#line 113 "grammar.m"
 return state((topsymbol(1).get<std::string>())); }

short parsing::parser::cond15( ) const
{
#line 117 "grammar.m"
 char c1 = toupper((topsymbol(1).get<char>())); return c1 == 'L' || c1 == 'S' || c1 == 'R'; }

auto parsing::parser::body15( ) -> int
{
#line 119 "grammar.m"

   char c1 = toupper((topsymbol(1).get<char>()));
   if( c1 == 'L' ) return -1;  // left 
   if( c1 == 'R' ) return 1;   // right
   return 0;   // stationary. 
}

auto parsing::parser::body20( ) -> std::vector<std::string>
{
#line 140 "grammar.m"
 return std::vector< std::string > ( ); }

auto parsing::parser::body21( ) -> std::vector<std::string>
{
#line 141 "grammar.m"
 return (topsymbol(1).get<std::vector<std::string>>()); }

auto parsing::parser::body22( ) -> std::vector<std::string>
{
#line 145 "grammar.m"
 return std::vector< std::string > ( ); }

auto parsing::parser::body23( ) -> std::vector<std::string>
{
#line 146 "grammar.m"
 (topsymbol(3).get<std::vector<std::string>>()). push_back((topsymbol(2).get<std::string>())); return (topsymbol(3).get<std::vector<std::string>>()); }



#line 1 "reduce"

void parsing::parser::reduce( parsing::symboltype lefttype,
               parsing::symbol::attrtype&& attr, size_t rightsize )
{
   if( debug >= 2 )
   {
      std::cout << "popping " << rightsize << " state(s) and symbol(s) "; 
      std::cout << "from the stack and reducing into " << lefttype << "\n";
   }

#if true
   // This works only if symbol has an info type: 

   std::optional< parsing::symbol::infotype > info;
      // For the first stack entry that has an info, we move it into here. 
      // For later stack entries that have an info, we merge them
      // with the first info. The idea is that info has set semantics. 

   for( auto p = symbolstack. end( ) - rightsize; 
        p != symbolstack. end( ); ++ p ) 
   {
      // If we encounter first defined, we move into info. 
      // 

      if( p -> info. has_value( )) 
      {
         if( info. has_value( ))
            info.value( ). merge( std::move( p -> info.value() ));
         else
            info = std::move( p -> info );
      }
   }
#endif 

   while( rightsize )
   {
      statestack. pop_back( );
      symbolstack. pop_back( );
      -- rightsize; 
   }
  
   // It remains to do the goto: 

   statestack. push_back( shifts. at( { statestack. back( ), lefttype } ));

#if true
   symbolstack. emplace_back( lefttype, info, std::move( attr ));
#else
   symbolstack. emplace_back( lefttype, std::move( attr ));
#endif 
}

#line 1 "parse"

parsing::symbol 
parsing::parser::parse( parsing::symboltype startsym )
{
   if( debug )
      std::cout << "Starting parser:\n";

   if( checkmovable ) 
   {
      if( ! std::is_nothrow_move_constructible<parsing::symbol> :: value )
      {
         std::cout << "class symbol is not nothrow move constructible\n";
         std::cout << "   (this causes loss of efficiency)\n"; 
         if( checkmovable > 1 )
            throw std::runtime_error( "because of this I stop" );
      }
      else
      {
         std::cout << "class symbol is nothrow move constructible\n";
         std::cout << "   (that is good)\n";
      }
   }

   if( debug >= 1 && 
          startsymbols. find( startsym ) == startsymbols. end( ))
   {
      std::cout << "startsymbol " << startsym << " is not a start symbol\n";
   }

   if( debug >= 1 && haslookahead( ))
      std::cout << "starting with lookahead = " << getlookahead( ) << "\n";

   const auto& startinfo = startsymbols. at( startsym );
   statestack. push_back( startinfo. first );
  
mainloop: 
   if( debug >= 1 ) 
      print( std::cout ); 

   if( timetosaygoodbye )
   {
      if( debug >= 2 ) 
         std::cout << "time to say goodbye!\n";

      parsing::symbol res = std::move( symbolstack. back( ));
      symbolstack. pop_back( );
      statestack. pop_back( );
      return res; 
   }
 
   size_t shift = reductioninfo. size( );  // Means undefined. 
   std::vector< size_t > redcandidates;

   const auto& redinfo = reductioninfo[ statestack. back( ) ]; 

   // If the state is non-trivial, we need a lookahead:

   if( redinfo. first != 'T' ) 
      ensurelookahead( ); 

   if( debug >= 3 && haslookahead( ))
      std::cout << "lookahead " << getlookahead( ) << "\n";

   switch( redinfo. first ) 
   {
   case 'N': 
   {
      auto p = shifts. find( 
               statesymbol( statestack.back( ), getlookahead( ). type ));
      if( p != shifts. end( ))
         shift = p -> second;
      break;
   }
   case 'D':
   {
      auto p = shifts. find(
               statesymbol( statestack.back( ), getlookahead( ). type ));
      if( p != shifts. end( ))
         shift = p -> second;
      else
         redcandidates. push_back( redinfo. second ); 
      break;
   }
   case 'H':
   {
      auto p = shifts. find(
               statesymbol( statestack. back( ), getlookahead( ). type ));
      if( p != shifts. end( ))
         shift = p -> second; 
     
      auto q = reductions. find( 
               statesymbol( statestack. back( ), getlookahead( ). type ));
      if( q != reductions. end( ))
         redcandidates = q -> second; 
      break;
   }
   case 'T':
      redcandidates. push_back( redinfo. second );
      break;   
   default:
      std::cout << redinfo.first << "\n";
      throw std::logic_error( "reduction info not recognized" );
   }
  
   if( debug >= 3 )
   { 
      if( shift != reductioninfo. size( ))
         std::cout << "shift candidate " << shift << "\n";

      if( redcandidates. size( )) 
      {
         std::cout << "reduction candidates: "; 
         for( size_t i = 0; i != redcandidates. size( ); ++ i )
            std::cout << redcandidates[i] << " ";
         std::cout << "\n";
      }
      else
         std::cout << "there are no reduction candidates\n";
   }

   // We need to find a reduction that agrees to be reduced.
   // After a reduction, we goto mainloop; 

   for( const auto& r : redcandidates ) 
   {
      if( debug >= 3 ) 
         std::cout << "trying to reduce rule " << r << "\n";

      switch(r)
      {
      case 0:
         reduce( parsing::sym_MachineWithInputs, body0( ), 17 );
         goto mainloop;
         break;
      case 1:
         reduce( parsing::sym_CharacterSet, body1( ), 0 );
         goto mainloop;
         break;
      case 2:
         reduce( parsing::sym_CharacterSet, body2( ), 2 );
         goto mainloop;
         break;
      case 3:
         reduce( parsing::sym_StateSet, body3( ), 0 );
         goto mainloop;
         break;
      case 4:
         reduce( parsing::sym_StateSet, body4( ), 2 );
         goto mainloop;
         break;
      case 5:
         reduce( parsing::sym_TransitionMap, body5( ), 0 );
         goto mainloop;
         break;
      case 6:
         reduce( parsing::sym_TransitionMap, body6( ), 2 );
         goto mainloop;
         break;
      case 7:
         reduce( parsing::sym_Transition, body7( ), 4 );
         goto mainloop;
         break;
      case 8:
         reduce( parsing::sym_Lhs, body8( ), 3 );
         goto mainloop;
         break;
      case 9:
         reduce( parsing::sym_Rhs, body9( ), 5 );
         goto mainloop;
         break;
      case 10:
         reduce( parsing::sym_Rhs, body10( ), 5 );
         goto mainloop;
         break;
      case 11:
         reduce( parsing::sym_Word, body11( ), 1 );
         goto mainloop;
         break;
      case 12:
         reduce( parsing::sym_Word, body12( ), 1 );
         goto mainloop;
         break;
      case 13:
         reduce( parsing::sym_Word, body13( ), 1 );
         goto mainloop;
         break;
      case 14:
         reduce( parsing::sym_State, body14( ), 1 );
         goto mainloop;
         break;
      case 15:
         if( short s = cond15(); s > 0 )
         {
            reduce( parsing::sym_LeftRightStat, body15( ), 1 );
            goto mainloop;
         }
         else
            if( s < 0 ) shift = reductioninfo. size( );
         break;
      case 16:
         reduce( parsing::sym_NewLines, std::monostate( ), 1 );
         goto mainloop;
         break;
      case 17:
         reduce( parsing::sym_NewLines, std::monostate( ), 2 );
         goto mainloop;
         break;
      case 18:
         reduce( parsing::sym_OptNewLines, std::monostate( ), 0 );
         goto mainloop;
         break;
      case 19:
         reduce( parsing::sym_OptNewLines, std::monostate( ), 1 );
         goto mainloop;
         break;
      case 20:
         reduce( parsing::sym_OptInputs, body20( ), 0 );
         goto mainloop;
         break;
      case 21:
         reduce( parsing::sym_OptInputs, body21( ), 3 );
         goto mainloop;
         break;
      case 22:
         reduce( parsing::sym_Words, body22( ), 0 );
         goto mainloop;
         break;
      case 23:
         reduce( parsing::sym_Words, body23( ), 3 );
         goto mainloop;
         break;
 
      default:
         throw std::logic_error( "reducing unknown rule" );  
      }
   }

   if( shift < reductioninfo. size( ))
   {
      if( debug >= 2 ) 
         std::cout << "shifting S" << shift << "\n";

      if( checkattrtypes )
      {
         if( !lookahead. value( ). has_correct_attribute( ))
         {
            std::cout << "\n";
            std::cout << "tokenizer created symbol with incorrect attribute:\n";
            std::cout << "   " << lookahead. value( ) << "\n\n";

            if( checkattrtypes >= 2 )
               throw std::logic_error( "stopping because of this" ); 
         } 
      }

      statestack. push_back( shift );
      symbolstack. push_back( std::move( lookahead. value( )));
      resetlookahead( ); 

      if( timesincelasterror < 99999999 )
         ++ timesincelasterror; 

      goto mainloop;
   }

   // We accept if the stack consists of exactly the start symbol, 
   // and we have no lookahead or the lookahead is a terminator.

   if( symbolstack. size( ) == 1 &&
       symbolstack. front( ). type == startsym &&
          ( !haslookahead( ) ||
            startinfo. second. count( getlookahead( ). type )))
   {
      if( debug >= 2 ) 
         std::cout << "we accept the input\n";

      parsing::symbol res = std::move( symbolstack. front( ));
      return res;
   }

#line 1 "startpoint"

   syntaxerror( ); 
   if( timesincelasterror < maxrecovery ) 
   {
      if( debug >= 2 )
         std::cout << "trying to recover\n";

      if( debug >= 2 )
         std::cout << "time since last error = " << timesincelasterror << "\n";

      std::vector< std::pair< size_t, size_t >> shiftrecover; 
         // We collect the levels whose state can shift the  _recover_ 
         // symbol, 
         // combined with the states that will be reached after the shifts.

      for( size_t level = 0; level != statestack. size( ); ++ level )
      {
         size_t s = statestack[ level ];

         if( reductioninfo[s]. first == 'N' ||
             reductioninfo[s]. first == 'D' ||
             reductioninfo[s]. first == 'H' )
         {
            auto p = shifts. find( statesymbol( s, parsing::sym__recover_ ));
            if( p != shifts. end( ))
               shiftrecover. push_back( std::pair( level, p -> second ));
         }
      } 

      if( debug >= 1 )
      { 
         std::cout << "possible shifts after the _recover_ symbol: {";
         for( auto p = shiftrecover. begin( ); p != shiftrecover. end( ); ++ p )
         {
            if( p != shiftrecover. begin( ))
               std::cout << ", ";
            else
               std::cout << " ";
            std::cout << ( p -> first ) << "/S" << ( p -> second );
         }
         std::cout << " }\n";
      }

      if( shiftrecover. size( ) == 0 )
      {
         if( debug >= 1 )
         {
            std::cout << "no recovering shifts found\n";
            if( haslookahead( ))
               std::cout << getlookahead( ) << "\n";
            else
               std::cout << "(there is no lookahead)\n"; 
         }

         return recover_symbol( ); 
      }

      if( debug >= 2 ) 
         std::cout << "lookahead = " << getlookahead( ) << "\n";

      // As long as we have patience left, and the lookahead is not
      // in the terminator set, we try to recover: 
 
      while( timesincelasterror < maxrecovery && 
             startinfo. second. count( getlookahead( ). type ) == 0 )
      {
         // We look in shiftrecover for the highest level on
         // which we could shift current lookahead after shifting the 
         // _recover_ symbol. 

         size_t rec = shiftrecover. size( ); 
         while( rec != 0 ) 
         { 
            -- rec; 
            size_t s = shiftrecover[ rec ]. second; 
            
            if( reductioninfo[s]. first == 'N' ||
                reductioninfo[s]. first == 'D' ||
                reductioninfo[s]. first == 'H' )
            {
               auto after = shifts. find( 
                      statesymbol( s, getlookahead( ). type ));

               if( after != shifts. end( ))
               {
                  if( debug >= 2 )
                  {
                     std::cout << rec << " is candidate\n";
                     std::cout << "recovery will be into state ";
                     std::cout << after -> second << "\n";
                  }

                  while( statestack. size() > shiftrecover[ rec ]. first + 1 )
                  {
                     statestack. pop_back( );
                     symbolstack. pop_back( );  
                  } 
                  
                  statestack. push_back(s);
                  symbolstack. push_back( recover_symbol( ));

                  statestack. push_back( after -> second );
                  symbolstack. push_back( std::move( lookahead. value( ) ));

                  lookahead. reset( );

                  if( debug >= 2 ) 
                  {
                     std::cout <<  "recovery complete" << "\n";
                  }
                  timesincelasterror = 0;
                  goto mainloop; 
               } 
            }
         }

         // We throw away the current lookahead,
         // and increase the time since the last error. 
 
         if( debug >= 1 ) 
         {
            std::cout << "not yet recovered, time since last error = ";
            std::cout << timesincelasterror << "\n";
         }
         lookahead. reset( ); 
         ensurelookahead( );  

         if( timesincelasterror < 99999999 )
            ++ timesincelasterror; 
      }
   }

   // That's it. Game over. We lost.

   if( debug )
   {
      if( timesincelasterror < maxrecovery ) 
         std::cout << "reached a terminator\n";
      else
         std::cout << "recovery ran out of patience\n";
   }

#if true
   return parsing::symbol( parsing::sym__recover_,
                  std::optional< parsing::symbol::infotype > ( ) );
#else
   return parsing::symbol( parsing::sym__recover_ );
#endif

}


parsing::symbol parsing::parser::recover_symbol( ) 
{
#if true
   return parsing::symbol( parsing::sym__recover_,
                  std::optional< parsing::symbol::infotype > ( ));
#else
   return parsing::symbol( parsing::sym__recover_ );
#endif
}


size_t 
parsing::parser::match( const expectation& exp ) const
{
   size_t stackpos = symbolstack. size( );
   size_t triggerpos = exp. trigger. size( );
      // Both use predecrement consistently.

   while( triggerpos )
   {
      -- triggerpos;

      size_t skipped = 0;

   loop:
      // It is possible to write this with a while loop, but
      // the result looks terrible.

      if( stackpos == 0 || skipped > exp. trigger[ triggerpos ]. maxskip )
         return symbolstack. size( ) + 1;

      -- stackpos;
      if( !exp. trigger[ triggerpos ]. set. contains( 
                    symbolstack[ stackpos ]. type ))
      {
         ++ skipped;
         goto loop;
      }
   }

   return stackpos;
}


#if ! false 

void
parsing::parser::syntaxerror( )
{
   if( timesincelasterror + 1 <= maxtrialperiod )
   {
      timesincelasterror = 0;
      return;
   }

   size_t bestpos = symbolstack. size( ) + 1;
   auto besterror = errormessages. end( );

   for( auto p = errormessages. begin( ); p != errormessages. end( ); ++ p )
   {
      size_t pos = match(*p);
      if( pos < bestpos )
      {
         bestpos = pos;
         besterror = p;
      }
   }

   if( bestpos <= symbolstack. size( ))
   {
      std::cout << "expected " << ( besterror -> expected );
      if( haslookahead( ))
      {
         std::cout << " instead of " << getlookahead( ). type;
      }
   }
   else
   {
      if( haslookahead( ))
         std::cout << "unexpected " << getlookahead( ). type;
      else
         std::cout << "syntax error";
   }

#if true
   // If symbols have location information, we try to extract a location.
   // We first check lookahead, then backwards on the parse stack, for
   // the first symbol that has location information.

   std::optional< parsing::symbol::infotype > info;
   if( haslookahead( ))
      info = getlookahead( ). info;

   auto p = symbolstack. end( );
   while( p != symbolstack. begin( ) && !info. has_value( ))
   {
      -- p;
      if( p -> info. has_value( ))
         info = p -> info;
   }

   if( info. has_value( ))
      std::cout << " at position " << info. value( );
#endif

   std::cout << "\n";
   timesincelasterror = 0; 
}

#endif


void
parsing::parser::reset( )
{
   if( debug >= 1 )
      std::cout << "Resetting parser\n";

   statestack. clear( );
   symbolstack. clear( );

   if( debug >= 1 && haslookahead( ))
      std::cout << "lookahead still contains " << getlookahead( ) << "\n";

   timetosaygoodbye = false;
}


void 
parsing::parser::print( std::ostream& out ) const
{
   out << "Statestack: ";
   for( auto s : statestack )
      out << "S" << s << " ";
   out << "\n";

   out << "Symbolstack: ";
   for( const auto& s : symbolstack )
      out << s << "   ";
   out << "\n";
   if( timesincelasterror < 1000 )
      out << "last error was " << timesincelasterror << " symbols ago\n";

}

const std::unordered_map< parsing::symboltype, std::pair< size_t, std::unordered_set< parsing::symboltype >>> parsing::parser::startsymbols =
{
   { parsing::sym_MachineWithInputs, { 0, { parsing::sym_EOF }} }
};

const std::vector< std::pair< char, size_t >> parsing::parser::reductioninfo =
{
   { 'D', 18 }, { 'T', 16 }, { 'D', 19 }, { 'N', 0 }, { 'T', 17 }, { 'D', 1 }, { 'N', 0 }, { 'N', 0 },
   { 'T', 2 }, { 'N', 0 }, { 'T', 11 }, { 'T', 12 }, { 'T', 14 }, { 'T', 13 }, { 'N', 0 }, { 'N', 0 },
   { 'D', 3 }, { 'N', 0 }, { 'N', 0 }, { 'T', 4 }, { 'N', 0 }, { 'N', 0 }, { 'N', 0 }, { 'N', 0 },
   { 'D', 5 }, { 'D', 20 }, { 'N', 0 }, { 'N', 0 }, { 'N', 0 }, { 'T', 0 }, { 'T', 6 }, { 'D', 22 },
   { 'N', 0 }, { 'N', 0 }, { 'D', 21 }, { 'T', 8 }, { 'N', 0 }, { 'N', 0 }, { 'N', 0 }, { 'N', 0 },
   { 'D', 7 }, { 'D', 23 }, { 'N', 0 }, { 'N', 0 }, { 'T', 15 }, { 'T', 9 }, { 'T', 10 }, { 'N', 0 }
};

const parsing::parser::statesymbol::map< size_t > parsing::parser::shifts =
{
   { { 43, parsing::sym_CHAR }, 44 }, { { 42, parsing::sym_COMMA }, 43 }, { { 41, parsing::sym_NL }, 4 }, { { 39, parsing::sym_DOT }, 13 }, { { 38, parsing::sym_NewLines }, 41 },
   { { 37, parsing::sym_NewLines }, 40 }, { { 36, parsing::sym_COMMA }, 39 }, { { 34, parsing::sym_DOT }, 13 }, { { 33, parsing::sym_CHAR }, 10 }, { { 38, parsing::sym_NL }, 1 },
   { { 33, parsing::sym_STRING }, 11 }, { { 33, parsing::sym_DOT }, 13 }, { { 17, parsing::sym_CHAR }, 10 }, { { 39, parsing::sym_Word }, 42 }, { { 17, parsing::sym_DOT }, 13 },
   { { 17, parsing::sym_State }, 19 }, { { 17, parsing::sym_NL }, 1 }, { { 15, parsing::sym_ACCEPTING }, 16 }, { { 17, parsing::sym_Word }, 12 }, { { 15, parsing::sym_NL }, 4 },
   { { 17, parsing::sym_STRING }, 11 }, { { 26, parsing::sym_NewLines }, 31 }, { { 14, parsing::sym_NL }, 1 }, { { 33, parsing::sym_Rhs }, 37 }, { { 18, parsing::sym_BLANK }, 20 },
   { { 25, parsing::sym_Transition }, 30 }, { { 9, parsing::sym_STRING }, 11 }, { { 25, parsing::sym_State }, 27 }, { { 34, parsing::sym_Word }, 38 }, { { 25, parsing::sym_STRING }, 11 },
   { { 39, parsing::sym_STRING }, 11 }, { { 9, parsing::sym_CHAR }, 10 }, { { 18, parsing::sym_NL }, 4 }, { { 0, parsing::sym_OptNewLines }, 3 }, { { 34, parsing::sym_CHAR }, 10 },
   { { 25, parsing::sym_Word }, 12 }, { { 0, parsing::sym_MachineWithInputs }, 47 }, { { 2, parsing::sym_NL }, 4 }, { { 34, parsing::sym_STRING }, 11 }, { { 9, parsing::sym_Word }, 12 },
   { { 3, parsing::sym_ALPHABET }, 5 }, { { 25, parsing::sym_OptInputs }, 29 }, { { 0, parsing::sym_NewLines }, 2 }, { { 0, parsing::sym_NL }, 1 }, { { 31, parsing::sym_Words }, 34 },
   { { 14, parsing::sym_NewLines }, 15 }, { { 6, parsing::sym_NewLines }, 7 }, { { 6, parsing::sym_CHAR }, 8 }, { { 7, parsing::sym_NL }, 4 }, { { 7, parsing::sym_STARTING }, 9 },
   { { 9, parsing::sym_State }, 14 }, { { 17, parsing::sym_NewLines }, 18 }, { { 28, parsing::sym_ARROW }, 33 }, { { 37, parsing::sym_NL }, 1 }, { { 9, parsing::sym_DOT }, 13 },
   { { 20, parsing::sym_CHAR }, 21 }, { { 40, parsing::sym_NL }, 4 }, { { 21, parsing::sym_NewLines }, 22 }, { { 21, parsing::sym_NL }, 1 }, { { 22, parsing::sym_NL }, 4 },
   { { 27, parsing::sym_COMMA }, 32 }, { { 6, parsing::sym_NL }, 1 }, { { 22, parsing::sym_TRANSITIONS }, 23 }, { { 23, parsing::sym_NewLines }, 24 }, { { 32, parsing::sym_CHAR }, 35 },
   { { 33, parsing::sym_State }, 36 }, { { 43, parsing::sym_LeftRightStat }, 46 }, { { 23, parsing::sym_NL }, 1 }, { { 25, parsing::sym_DOT }, 13 }, { { 25, parsing::sym_Lhs }, 28 },
   { { 5, parsing::sym_CharacterSet }, 6 }, { { 25, parsing::sym_INPUTS }, 26 }, { { 43, parsing::sym_INTEGER }, 45 }, { { 24, parsing::sym_NL }, 4 }, { { 24, parsing::sym_TransitionMap }, 25 },
   { { 25, parsing::sym_CHAR }, 10 }, { { 39, parsing::sym_CHAR }, 10 }, { { 16, parsing::sym_StateSet }, 17 }, { { 26, parsing::sym_NL }, 1 }, { { 33, parsing::sym_Word }, 12 },
   { { 31, parsing::sym_NL }, 4 }
};

const parsing::parser::statesymbol::map< std::vector< size_t >> parsing::parser::reductions =
{
   
};


const std::vector< parsing::parser::expectation > parsing::parser::errormessages =
{
   { { {{ parsing::sym_TRANSITIONS }, 2 }, {{ parsing::sym_TransitionMap }, 0 }, {{ parsing::sym_State }, 1 } }, "lhs character" },
   { { {{ parsing::sym_MachineWithInputs }, 0 } }, "a state, %inputs, %end, or a test word" },
   { { {{ parsing::sym_TransitionMap }, 0 }, {{ parsing::sym_Lhs }, 0 } }, "-->" },
   { { {{ parsing::sym_ARROW }, 0 } }, "destination state" },
   { { {{ parsing::sym_ARROW }, 0 }, {{ parsing::sym_State }, 1 } }, "rhs word" },
   { { {{ parsing::sym_ARROW }, 1 }, {{ parsing::sym_State }, 1 }, {{ parsing::sym_COMMA }, 1 }, {{ parsing::sym_Word }, 2 } }, "L,S,R, or integer" },
   { { {{ parsing::sym_Rhs }, 1 } }, "newline" },
   { { {{ parsing::sym_ACCEPTING }, 4 } }, "state" },
   { { {{ parsing::sym_BLANK }, 2 } }, "a newline" },
   { { {{ parsing::sym_ALPHABET }, 1 } }, "a symbol" }
};


