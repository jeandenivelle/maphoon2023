
// Parser generated by Maphoon 2022.
// Written by Hans de Nivelle, March 2021-May 2022.
// See the licence that was included with the code.

#include "parser.h"

#line 51 "grammar.m"

   namespace
   {

      // We are deciding about reducing t1.
      // 1 : we reduce
      // 0 : we don't reduce
      // -1 : we do not even shift.

      short int decide( symboltype t1, symboltype t2 ) 
      {
         // std::cout << "Deciding between: " << t1 << " " << t2 << "\n";

         if( t1 == sym_NOT || t1 == sym_DIA || t1 == sym_BOX || t1 == sym_AND )
            return 1;

         if( t1 == sym_OR )
         {
            if( t2 == sym_AND ) 
               return 0;
            return 1;
         }

         if( t1 == sym_IMP )
         {
            if( t2 == sym_AND || t2 == sym_OR || t2 == sym_IMP )
               return 0;
            return 1;
         }

         if( t1 == sym_EQUIV )
         {
            if( t2 == sym_AND || t2 == sym_OR || t2 == sym_IMP )
               return 0; 
            if( t2 == sym_EQUIV )
               return -1;
            return 1; 
         }

         throw std::runtime_error( "should be unreachable" ); 
      }
   }


#line 207 "idee.x"


size_t 
parser::statesymbol::hash::operator( ) ( const statesymbol& ss ) const
{
   // After some trying, and looking at the distribution in the map,
   // this gives decent results:

   auto s = ss. state;
   auto t = ss. type;
   size_t h = s + 41 * t + t * t; 
   h ^= ( h >> 7 );
   return h;
}

bool
parser::statesymbol::equal_to::operator( ) ( const statesymbol& ss1,
                                                            const statesymbol& ss2 ) const
{
   return ss1. state == ss2. state && ss1. type == ss2. type;
}


// Definitions of the reduction functions:

auto parser::body2( ) -> form
{
#line 110 "grammar.m"
 std::cout << "    formula: "; (topsymbol(2).get<form>()). printprefix( std::cout ); 
     std::cout << "\n"; return (topsymbol(2).get<form>()); }

auto parser::body3( ) -> form
{
#line 114 "grammar.m"
 std::cout << "returning ";
     (topsymbol(2).get<form>()). printprefix( std::cout ); 
     timetosaygoodbye = true; return (topsymbol(2).get<form>()); }

auto parser::body4( ) -> form
{
#line 119 "grammar.m"
 vs. assign( (topsymbol(4).get<std::string>()), (topsymbol(2).get<form>()) ); return (topsymbol(2).get<form>()); }

auto parser::body5( ) -> form
{
#line 122 "grammar.m"
 return form( "ERROR" ); }

auto parser::body6( ) -> form
{
#line 125 "grammar.m"
 return form( "ERROR" ); }

auto parser::body7( ) -> form
{
#line 128 "grammar.m"
 return form( "ERROR" ); }

auto parser::body8( ) -> form
{
#line 132 "grammar.m"
 return (topsymbol(1).get<std::string>()); }

auto parser::body9( ) -> form
{
#line 134 "grammar.m"
 return form( (topsymbol(1).get<bool>()) ? op_true : op_false ); }

short parser::cond10( ) const
{
#line 139 "grammar.m"
 return decide( sym_NOT, getlookahead( ). type ); }

auto parser::body10( ) -> form
{
#line 141 "grammar.m"
 return form( op_not, (topsymbol(1).get<form>()) ); }

short parser::cond11( ) const
{
#line 146 "grammar.m"
 return decide( sym_AND, getlookahead( ). type ); }

auto parser::body11( ) -> form
{
#line 148 "grammar.m"
 return form( op_and, (topsymbol(3).get<form>()), (topsymbol(1).get<form>()) ); }

short parser::cond12( ) const
{
#line 153 "grammar.m"
 return decide( sym_OR, getlookahead( ). type ); }

auto parser::body12( ) -> form
{
#line 155 "grammar.m"
 return form( op_or, (topsymbol(3).get<form>()), (topsymbol(1).get<form>()) ); }

short parser::cond13( ) const
{
#line 160 "grammar.m"
 return decide( sym_IMP, getlookahead( ). type ); }

auto parser::body13( ) -> form
{
#line 162 "grammar.m"
 return form( op_imp, (topsymbol(3).get<form>()), (topsymbol(1).get<form>()) ); }

short parser::cond14( ) const
{
#line 167 "grammar.m"
 return decide( sym_EQUIV, getlookahead( ). type ); }

auto parser::body14( ) -> form
{
#line 169 "grammar.m"
 return form( op_equiv, (topsymbol(3).get<form>()), (topsymbol(1).get<form>()) ); }

short parser::cond15( ) const
{
#line 174 "grammar.m"
 return decide( sym_BOX, getlookahead( ). type ); }

auto parser::body15( ) -> form
{
#line 176 "grammar.m"
 return form( op_box, (topsymbol(2).get<agent>()), (topsymbol(1).get<form>()) ); }

short parser::cond16( ) const
{
#line 181 "grammar.m"
 return decide( sym_BOX, getlookahead( ). type ); }

auto parser::body16( ) -> form
{
#line 183 "grammar.m"
 return form( op_box, (topsymbol(3).get<agent>()), (topsymbol(1).get<form>()) ); }

short parser::cond17( ) const
{
#line 188 "grammar.m"
 return decide( sym_DIA, getlookahead( ). type ); }

auto parser::body17( ) -> form
{
#line 190 "grammar.m"
 return form( op_dia, (topsymbol(2).get<agent>()), (topsymbol(1).get<form>()) ); }

short parser::cond18( ) const
{
#line 195 "grammar.m"
 return decide( sym_DIA, getlookahead( ). type ); }

auto parser::body18( ) -> form
{
#line 197 "grammar.m"
 return form( op_dia, (topsymbol(3).get<agent>()), (topsymbol(1).get<form>()) ); }

short parser::cond19( ) const
{
#line 202 "grammar.m"
 return decide( sym_DIA, getlookahead( ). type ); }

auto parser::body19( ) -> form
{
#line 204 "grammar.m"
 return form( op_box, "#1", (topsymbol(1).get<form>()) ); }

short parser::cond20( ) const
{
#line 209 "grammar.m"
 return decide( sym_BOX, getlookahead( ). type ); }

auto parser::body20( ) -> form
{
#line 211 "grammar.m"
 return form( op_dia, "#1", (topsymbol(1).get<form>()) ); }

auto parser::body21( ) -> form
{
#line 213 "grammar.m"
 return (topsymbol(2).get<form>()); }

auto parser::body22( ) -> form
{
#line 216 "grammar.m"
 return form( op_dia, agent( "ERROR" ), op_false ); }

auto parser::body23( ) -> form
{
#line 220 "grammar.m"

      if( vs. contains( (topsymbol(1).get<std::string>()) ))
         return *vs. lookup( (topsymbol(1).get<std::string>()) ); 
      else
         return form( op_dia, agent( "NOT FOUND" ), op_false ); 
   }

auto parser::body24( ) -> form
{
#line 228 "grammar.m"
 return (topsymbol(2).get<form>()). nnf(1); }

auto parser::body25( ) -> form
{
#line 231 "grammar.m"
 return form( op_dia, agent( "wrong NNF" ), op_false ); }

auto parser::body26( ) -> std::string
{
#line 235 "grammar.m"
 return (topsymbol(1).get<std::string>()); }

auto parser::body27( ) -> agent
{
#line 237 "grammar.m"
 return (topsymbol(1).get<std::string>()); }

auto parser::body28( ) -> agent
{
#line 238 "grammar.m"
 return std::string( "#" ) + std::to_string((topsymbol(1).get<unsigned int>())); }



#line 1 "reduce"

void parser::reduce( symboltype lefttype,
               symbol::attrtype&& attr, size_t rightsize )
{
   if( debug >= 2 )
   {
      std::cout << "popping " << rightsize << " state(s) and symbol(s) "; 
      std::cout << "from the stack and reducing into " << lefttype << "\n";
   }

#if false
   // This works only if symbol has an info type: 

   std::optional< symbol::infotype > info;
      // For the first stack entry that has an info, we move it into here. 
      // For later stack entries that have an info, we merge them
      // with the first info. The idea is that info has set semantics. 

   for( auto p = symbolstack. end( ) - rightsize; 
        p != symbolstack. end( ); ++ p ) 
   {
      // If we encounter first defined, we move into info. 
      // 

      if( p -> info. has_value( )) 
      {
         if( info. has_value( ))
            info.value( ). merge( std::move( p -> info.value() ));
         else
            info = std::move( p -> info );
      }
   }
#endif 

   while( rightsize )
   {
      statestack. pop_back( );
      symbolstack. pop_back( );
      -- rightsize; 
   }
  
   // It remains to do the goto: 

   statestack. push_back( shifts. at( { statestack. back( ), lefttype } ));

#if false
   symbolstack. emplace_back( lefttype, info, std::move( attr ));
#else
   symbolstack. emplace_back( lefttype, std::move( attr ));
#endif 
}

#line 1 "parse"

symbol 
parser::parse( symboltype startsym )
{
   if( debug )
      std::cout << "Starting parser:\n";

   if( checkmovable ) 
   {
      if( ! std::is_nothrow_move_constructible<symbol> :: value )
      {
         std::cout << "class symbol is not nothrow move constructible\n";
         std::cout << "   (this causes loss of efficiency)\n"; 
         if( checkmovable > 1 )
            throw std::runtime_error( "because of this I stop" );
      }
      else
      {
         std::cout << "class symbol is nothrow move constructible\n";
         std::cout << "   (that is good)\n";
      }
   }

   if( debug >= 1 && 
          startsymbols. find( startsym ) == startsymbols. end( ))
   {
      std::cout << "startsymbol " << startsym << " is not a start symbol\n";
   }

   if( debug >= 1 && haslookahead( ))
      std::cout << "starting with lookahead = " << getlookahead( ) << "\n";

   const auto& startinfo = startsymbols. at( startsym );
   statestack. push_back( startinfo. first );
  
mainloop: 
   if( debug >= 1 ) 
      print( std::cout ); 

   if( timetosaygoodbye )
   {
      if( debug >= 2 ) 
         std::cout << "time to say goodbye!\n";

      symbol res = std::move( symbolstack. back( ));
      symbolstack. pop_back( );
      statestack. pop_back( );
      return res; 
   }
 
   size_t shift = reductioninfo. size( );  // Means undefined. 
   std::vector< size_t > redcandidates;

   const auto& redinfo = reductioninfo[ statestack. back( ) ]; 

   // If the state is non-trivial, we need a lookahead:

   if( redinfo. first != 'T' ) 
      ensurelookahead( ); 

   if( debug >= 3 && haslookahead( ))
      std::cout << "lookahead " << getlookahead( ) << "\n";

   switch( redinfo. first ) 
   {
   case 'N': 
   {
      auto p = shifts. find( 
               statesymbol( statestack.back( ), getlookahead( ). type ));
      if( p != shifts. end( ))
         shift = p -> second;
      break;
   }
   case 'D':
   {
      auto p = shifts. find(
               statesymbol( statestack.back( ), getlookahead( ). type ));
      if( p != shifts. end( ))
         shift = p -> second;
      else
         redcandidates. push_back( redinfo. second ); 
      break;
   }
   case 'H':
   {
      auto p = shifts. find(
               statesymbol( statestack. back( ), getlookahead( ). type ));
      if( p != shifts. end( ))
         shift = p -> second; 
     
      auto q = reductions. find( 
               statesymbol( statestack. back( ), getlookahead( ). type ));
      if( q != reductions. end( ))
         redcandidates = q -> second; 
      break;
   }
   case 'T':
      redcandidates. push_back( redinfo. second );
      break;   
   default:
      std::cout << redinfo.first << "\n";
      throw std::logic_error( "reduction info not recognized" );
   }
  
   if( debug >= 3 )
   { 
      if( shift != reductioninfo. size( ))
         std::cout << "shift candidate " << shift << "\n";

      if( redcandidates. size( )) 
      {
         std::cout << "reduction candidates: "; 
         for( size_t i = 0; i != redcandidates. size( ); ++ i )
            std::cout << redcandidates[i] << " ";
         std::cout << "\n";
      }
      else
         std::cout << "there are no reduction candidates\n";
   }

   // We need to find a reduction that agrees to be reduced.
   // After a reduction, we goto mainloop; 

   for( const auto& r : redcandidates ) 
   {
      if( debug >= 3 ) 
         std::cout << "trying to reduce rule " << r << "\n";

      switch(r)
      {
      case 0:
         reduce( sym_Session, std::monostate( ), 2 );
         goto mainloop;
         break;
      case 1:
         reduce( sym_Session, std::monostate( ), 0 );
         goto mainloop;
         break;
      case 2:
         reduce( sym_Command, body2( ), 2 );
         goto mainloop;
         break;
      case 3:
         reduce( sym_Command, body3( ), 3 );
         goto mainloop;
         break;
      case 4:
         reduce( sym_Command, body4( ), 4 );
         goto mainloop;
         break;
      case 5:
         reduce( sym_Command, body5( ), 2 );
         goto mainloop;
         break;
      case 6:
         reduce( sym_Command, body6( ), 3 );
         goto mainloop;
         break;
      case 7:
         reduce( sym_Command, body7( ), 3 );
         goto mainloop;
         break;
      case 8:
         reduce( sym_Formula, body8( ), 1 );
         goto mainloop;
         break;
      case 9:
         reduce( sym_Formula, body9( ), 1 );
         goto mainloop;
         break;
      case 10:
         if( short s = cond10(); s > 0 )
         {
            reduce( sym_Formula, body10( ), 2 );
            goto mainloop;
         }
         else
            if( s < 0 ) shift = reductioninfo. size( );
         break;
      case 11:
         if( short s = cond11(); s > 0 )
         {
            reduce( sym_Formula, body11( ), 3 );
            goto mainloop;
         }
         else
            if( s < 0 ) shift = reductioninfo. size( );
         break;
      case 12:
         if( short s = cond12(); s > 0 )
         {
            reduce( sym_Formula, body12( ), 3 );
            goto mainloop;
         }
         else
            if( s < 0 ) shift = reductioninfo. size( );
         break;
      case 13:
         if( short s = cond13(); s > 0 )
         {
            reduce( sym_Formula, body13( ), 3 );
            goto mainloop;
         }
         else
            if( s < 0 ) shift = reductioninfo. size( );
         break;
      case 14:
         if( short s = cond14(); s > 0 )
         {
            reduce( sym_Formula, body14( ), 3 );
            goto mainloop;
         }
         else
            if( s < 0 ) shift = reductioninfo. size( );
         break;
      case 15:
         if( short s = cond15(); s > 0 )
         {
            reduce( sym_Formula, body15( ), 3 );
            goto mainloop;
         }
         else
            if( s < 0 ) shift = reductioninfo. size( );
         break;
      case 16:
         if( short s = cond16(); s > 0 )
         {
            reduce( sym_Formula, body16( ), 4 );
            goto mainloop;
         }
         else
            if( s < 0 ) shift = reductioninfo. size( );
         break;
      case 17:
         if( short s = cond17(); s > 0 )
         {
            reduce( sym_Formula, body17( ), 3 );
            goto mainloop;
         }
         else
            if( s < 0 ) shift = reductioninfo. size( );
         break;
      case 18:
         if( short s = cond18(); s > 0 )
         {
            reduce( sym_Formula, body18( ), 4 );
            goto mainloop;
         }
         else
            if( s < 0 ) shift = reductioninfo. size( );
         break;
      case 19:
         if( short s = cond19(); s > 0 )
         {
            reduce( sym_Formula, body19( ), 2 );
            goto mainloop;
         }
         else
            if( s < 0 ) shift = reductioninfo. size( );
         break;
      case 20:
         if( short s = cond20(); s > 0 )
         {
            reduce( sym_Formula, body20( ), 2 );
            goto mainloop;
         }
         else
            if( s < 0 ) shift = reductioninfo. size( );
         break;
      case 21:
         reduce( sym_Formula, body21( ), 3 );
         goto mainloop;
         break;
      case 22:
         reduce( sym_Formula, body22( ), 3 );
         goto mainloop;
         break;
      case 23:
         reduce( sym_Formula, body23( ), 1 );
         goto mainloop;
         break;
      case 24:
         reduce( sym_Formula, body24( ), 4 );
         goto mainloop;
         break;
      case 25:
         reduce( sym_Formula, body25( ), 4 );
         goto mainloop;
         break;
      case 26:
         reduce( sym_Var, body26( ), 1 );
         goto mainloop;
         break;
      case 27:
         reduce( sym_Index, body27( ), 1 );
         goto mainloop;
         break;
      case 28:
         reduce( sym_Index, body28( ), 1 );
         goto mainloop;
         break;
 
      default:
         throw std::logic_error( "reducing unknown rule" );  
      }
   }

   if( shift < reductioninfo. size( ))
   {
      if( debug >= 2 ) 
         std::cout << "shifting S" << shift << "\n";

      if( checkattrtypes )
      {
         if( !lookahead. value( ). has_correct_attribute( ))
         {
            std::cout << "\n";
            std::cout << "tokenizer created symbol with incorrect attribute:\n";
            std::cout << "   " << lookahead. value( ) << "\n\n";

            if( checkattrtypes >= 2 )
               throw std::logic_error( "stopping because of this" ); 
         } 
      }

      statestack. push_back( shift );
      symbolstack. push_back( std::move( lookahead. value( )));
      resetlookahead( ); 

      if( timesincelasterror < 99999999 )
         ++ timesincelasterror; 

      goto mainloop;
   }

   // We accept if the stack consists of exactly the start symbol, 
   // and we have no lookahead or the lookahead is a terminator.

   if( symbolstack. size( ) == 1 &&
       symbolstack. front( ). type == startsym &&
          ( !haslookahead( ) ||
            startinfo. second. count( getlookahead( ). type )))
   {
      if( debug >= 2 ) 
         std::cout << "we accept the input\n";

      symbol res = std::move( symbolstack. front( ));
      return res;
   }

#line 1 "startpoint"

   syntaxerror( ); 
   if( timesincelasterror < maxrecovery ) 
   {
      if( debug >= 2 )
         std::cout << "trying to recover\n";

      if( debug >= 2 )
         std::cout << "time since last error = " << timesincelasterror << "\n";

      std::vector< std::pair< size_t, size_t >> shiftrecover; 
         // We collect the levels whose state can shift the  _recover_ 
         // symbol, 
         // combined with the states that will be reached after the shifts.

      for( size_t level = 0; level != statestack. size( ); ++ level )
      {
         size_t s = statestack[ level ];

         if( reductioninfo[s]. first == 'N' ||
             reductioninfo[s]. first == 'D' ||
             reductioninfo[s]. first == 'H' )
         {
            auto p = shifts. find( statesymbol( s, sym__recover_ ));
            if( p != shifts. end( ))
               shiftrecover. push_back( std::pair( level, p -> second ));
         }
      } 

      if( debug >= 1 )
      { 
         std::cout << "possible shifts after the _recover_ symbol: {";
         for( auto p = shiftrecover. begin( ); p != shiftrecover. end( ); ++ p )
         {
            if( p != shiftrecover. begin( ))
               std::cout << ", ";
            else
               std::cout << " ";
            std::cout << ( p -> first ) << "/S" << ( p -> second );
         }
         std::cout << " }\n";
      }

      if( shiftrecover. size( ) == 0 )
      {
         if( debug >= 1 )
         {
            std::cout << "no recovering shifts found\n";
            if( haslookahead( ))
               std::cout << getlookahead( ) << "\n";
            else
               std::cout << "(there is no lookahead)\n"; 
         }

         return recover_symbol( ); 
      }

      if( debug >= 2 ) 
         std::cout << "lookahead = " << getlookahead( ) << "\n";

      // As long as we have patience left, and the lookahead is not
      // in the terminator set, we try to recover: 
 
      while( timesincelasterror < maxrecovery && 
             startinfo. second. count( getlookahead( ). type ) == 0 )
      {
         // We look in shiftrecover for the highest level on
         // which we could shift current lookahead after shifting the 
         // _recover_ symbol. 

         size_t rec = shiftrecover. size( ); 
         while( rec != 0 ) 
         { 
            -- rec; 
            size_t s = shiftrecover[ rec ]. second; 
            
            if( reductioninfo[s]. first == 'N' ||
                reductioninfo[s]. first == 'D' ||
                reductioninfo[s]. first == 'H' )
            {
               auto after = shifts. find( 
                      statesymbol( s, getlookahead( ). type ));

               if( after != shifts. end( ))
               {
                  if( debug >= 2 )
                  {
                     std::cout << rec << " is candidate\n";
                     std::cout << "recovery will be into state ";
                     std::cout << after -> second << "\n";
                  }

                  while( statestack. size() > shiftrecover[ rec ]. first + 1 )
                  {
                     statestack. pop_back( );
                     symbolstack. pop_back( );  
                  } 
                  
                  statestack. push_back(s);
                  symbolstack. push_back( recover_symbol( ));

                  statestack. push_back( after -> second );
                  symbolstack. push_back( std::move( lookahead. value( ) ));

                  lookahead. reset( );

                  if( debug >= 2 ) 
                  {
                     std::cout <<  "recovery complete" << "\n";
                  }
                  timesincelasterror = 0;
                  goto mainloop; 
               } 
            }
         }

         // We throw away the current lookahead,
         // and increase the time since the last error. 
 
         if( debug >= 1 ) 
         {
            std::cout << "not yet recovered, time since last error = ";
            std::cout << timesincelasterror << "\n";
         }
         lookahead. reset( ); 
         ensurelookahead( );  

         if( timesincelasterror < 99999999 )
            ++ timesincelasterror; 
      }
   }

   // That's it. Game over. We lost.

   if( debug )
   {
      if( timesincelasterror < maxrecovery ) 
         std::cout << "reached a terminator\n";
      else
         std::cout << "recovery ran out of patience\n";
   }

#if false
   return symbol( sym__recover_,
                  std::optional< symbol::infotype > ( ) );
#else
   return symbol( sym__recover_ );
#endif

}


symbol parser::recover_symbol( ) 
{
#if false
   return symbol( sym__recover_,
                  std::optional< symbol::infotype > ( ));
#else
   return symbol( sym__recover_ );
#endif
}


size_t 
parser::match( const expectation& exp ) const
{
   size_t stackpos = symbolstack. size( );
   size_t triggerpos = exp. trigger. size( );
      // Both use predecrement consistently.

   while( triggerpos )
   {
      -- triggerpos;

      size_t skipped = 0;

   loop:
      // It is possible to write this with a while loop, but
      // the result looks terrible.

      if( stackpos == 0 || skipped > exp. trigger[ triggerpos ]. maxskip )
         return symbolstack. size( ) + 1;

      -- stackpos;
      if( !exp. trigger[ triggerpos ]. set. contains( 
                    symbolstack[ stackpos ]. type ))
      {
         ++ skipped;
         goto loop;
      }
   }

   return stackpos;
}


#if ! false 

void
parser::syntaxerror( )
{
   if( timesincelasterror + 1 <= maxtrialperiod )
   {
      timesincelasterror = 0;
      return;
   }

   size_t bestpos = symbolstack. size( ) + 1;
   auto besterror = errormessages. end( );

   for( auto p = errormessages. begin( ); p != errormessages. end( ); ++ p )
   {
      size_t pos = match(*p);
      if( pos < bestpos )
      {
         bestpos = pos;
         besterror = p;
      }
   }

   if( bestpos <= symbolstack. size( ))
   {
      std::cout << "expected " << ( besterror -> expected );
      if( haslookahead( ))
      {
         std::cout << " instead of " << getlookahead( ). type;
      }
   }
   else
   {
      if( haslookahead( ))
         std::cout << "unexpected " << getlookahead( ). type;
      else
         std::cout << "syntax error";
   }

#if false
   // If symbols have location information, we try to extract a location.
   // We first check lookahead, then backwards on the parse stack, for
   // the first symbol that has location information.

   std::optional< symbol::infotype > info;
   if( haslookahead( ))
      info = getlookahead( ). info;

   auto p = symbolstack. end( );
   while( p != symbolstack. begin( ) && !info. has_value( ))
   {
      -- p;
      if( p -> info. has_value( ))
         info = p -> info;
   }

   if( info. has_value( ))
      std::cout << " at position " << info. value( );
#endif

   std::cout << "\n";
   timesincelasterror = 0; 
}

#endif


void
parser::reset( )
{
   if( debug >= 1 )
      std::cout << "Resetting parser\n";

   statestack. clear( );
   symbolstack. clear( );

   if( debug >= 1 && haslookahead( ))
      std::cout << "lookahead still contains " << getlookahead( ) << "\n";

   timetosaygoodbye = false;
}


void 
parser::print( std::ostream& out ) const
{
   out << "Statestack: ";
   for( auto s : statestack )
      out << "S" << s << " ";
   out << "\n";

   out << "Symbolstack: ";
   for( const auto& s : symbolstack )
      out << s << "   ";
   out << "\n";
   if( timesincelasterror < 1000 )
      out << "last error was " << timesincelasterror << " symbols ago\n";

}

const std::unordered_map< symboltype, std::pair< size_t, std::unordered_set< symboltype >>> parser::startsymbols =
{
   { sym_Session, { 0, { sym_EOF }} }
};

const std::vector< std::pair< char, size_t >> parser::reductioninfo =
{
   { 'D', 1 }, { 'N', 0 }, { 'T', 0 }, { 'N', 0 }, { 'T', 8 }, { 'N', 0 }, { 'N', 0 }, { 'N', 0 },
   { 'T', 26 }, { 'N', 0 }, { 'N', 0 }, { 'N', 0 }, { 'N', 0 }, { 'D', 23 }, { 'N', 0 }, { 'N', 0 },
   { 'N', 0 }, { 'T', 9 }, { 'N', 0 }, { 'T', 23 }, { 'H', 0 }, { 'N', 0 }, { 'N', 0 }, { 'T', 27 },
   { 'T', 28 }, { 'N', 0 }, { 'T', 2 }, { 'N', 0 }, { 'N', 0 }, { 'N', 0 }, { 'N', 0 }, { 'N', 0 },
   { 'N', 0 }, { 'N', 0 }, { 'H', 0 }, { 'H', 0 }, { 'N', 0 }, { 'N', 0 }, { 'T', 5 }, { 'N', 0 },
   { 'N', 0 }, { 'H', 0 }, { 'N', 0 }, { 'T', 22 }, { 'T', 21 }, { 'N', 0 }, { 'H', 0 }, { 'H', 0 },
   { 'H', 0 }, { 'H', 0 }, { 'N', 0 }, { 'N', 0 }, { 'N', 0 }, { 'T', 3 }, { 'H', 0 }, { 'N', 0 },
   { 'T', 7 }, { 'T', 6 }, { 'H', 0 }, { 'H', 0 }, { 'H', 0 }, { 'T', 25 }, { 'T', 24 }, { 'T', 4 }
};

const parser::statesymbol::map< size_t > parser::shifts =
{
   { { 59, sym_EQUIV }, 30 }, { { 59, sym_AND }, 27 }, { { 58, sym_EQUIV }, 30 }, { { 58, sym_IMP }, 29 }, { { 55, sym_EQUIV }, 30 },
   { { 55, sym_IMP }, 29 }, { { 54, sym_EQUIV }, 30 }, { { 54, sym_IMP }, 29 }, { { 59, sym_OR }, 28 }, { { 54, sym_AND }, 27 },
   { { 52, sym_OR }, 28 }, { { 52, sym_AND }, 27 }, { { 52, sym_RIGHTPAR }, 62 }, { { 51, sym_RIGHTPAR }, 61 }, { { 50, sym_METAVAR }, 19 },
   { { 50, sym_NNF }, 10 }, { { 50, sym_CONST }, 17 }, { { 28, sym_ID }, 8 }, { { 28, sym_Formula }, 47 }, { { 27, sym_METAVAR }, 19 },
   { { 27, sym_BOXSTART }, 9 }, { { 5, sym_ID }, 8 }, { { 14, sym_SEMICOLON }, 38 }, { { 27, sym_Var }, 4 }, { { 50, sym_BOXSTART }, 9 },
   { { 1, sym_METAVAR }, 13 }, { { 27, sym_ID }, 8 }, { { 28, sym_METAVAR }, 19 }, { { 27, sym_DIA }, 18 }, { { 36, sym_NNF }, 10 },
   { { 22, sym_OR }, 28 }, { { 30, sym_NNF }, 10 }, { { 20, sym_EQUIV }, 30 }, { { 13, sym_BECOMES }, 37 }, { { 27, sym_CONST }, 17 },
   { { 20, sym_IMP }, 29 }, { { 37, sym_ID }, 8 }, { { 27, sym_LEFTPAR }, 5 }, { { 22, sym_RIGHTPAR }, 44 }, { { 0, sym_Session }, 1 },
   { { 18, sym_DIASTART }, 6 }, { { 18, sym_Var }, 4 }, { { 18, sym_NNF }, 10 }, { { 11, sym_NOT }, 3 }, { { 22, sym_EQUIV }, 30 },
   { { 9, sym_NUMBER }, 24 }, { { 37, sym_DIA }, 18 }, { { 5, sym__recover_ }, 21 }, { { 22, sym_IMP }, 29 }, { { 28, sym_BOX }, 12 },
   { { 18, sym_LEFTPAR }, 5 }, { { 1, sym_ID }, 8 }, { { 12, sym_METAVAR }, 19 }, { { 29, sym_METAVAR }, 19 }, { { 30, sym_Var }, 4 },
   { { 12, sym_NUMBER }, 24 }, { { 12, sym_NOT }, 3 }, { { 29, sym_BOXSTART }, 9 }, { { 12, sym_DIA }, 18 }, { { 12, sym_Var }, 4 },
   { { 18, sym_DIA }, 18 }, { { 36, sym_BOXSTART }, 9 }, { { 12, sym_ID }, 35 }, { { 12, sym_Index }, 36 }, { { 11, sym_METAVAR }, 19 },
   { { 27, sym_Formula }, 46 }, { { 11, sym_DIA }, 18 }, { { 20, sym_OR }, 28 }, { { 16, sym__recover_ }, 40 }, { { 60, sym_IMP }, 29 },
   { { 10, sym_LEFTPAR }, 32 }, { { 18, sym_NOT }, 3 }, { { 59, sym_IMP }, 29 }, { { 18, sym_NUMBER }, 24 }, { { 27, sym_NNF }, 10 },
   { { 50, sym_DIA }, 18 }, { { 5, sym_BOX }, 12 }, { { 3, sym_LEFTPAR }, 5 }, { { 58, sym_OR }, 28 }, { { 55, sym_AND }, 27 },
   { { 5, sym_DIASTART }, 6 }, { { 20, sym_AND }, 27 }, { { 30, sym_DIASTART }, 6 }, { { 42, sym_NOT }, 3 }, { { 3, sym_NOT }, 3 },
   { { 60, sym_OR }, 28 }, { { 36, sym_LEFTPAR }, 5 }, { { 3, sym_METAVAR }, 19 }, { { 29, sym_Var }, 4 }, { { 1, sym__recover_ }, 14 },
   { { 1, sym_RETURN }, 11 }, { { 12, sym_NNF }, 10 }, { { 37, sym_NOT }, 3 }, { { 11, sym_LEFTPAR }, 5 }, { { 28, sym_BOXSTART }, 9 },
   { { 1, sym_BOXSTART }, 9 }, { { 48, sym_AND }, 27 }, { { 3, sym_DIA }, 18 }, { { 31, sym_BOXEND }, 50 }, { { 28, sym_NNF }, 10 },
   { { 37, sym_Formula }, 55 }, { { 9, sym_ID }, 23 }, { { 3, sym_ID }, 8 }, { { 45, sym_Formula }, 59 }, { { 27, sym_NOT }, 3 },
   { { 21, sym_RIGHTPAR }, 43 }, { { 28, sym_LEFTPAR }, 5 }, { { 27, sym_DIASTART }, 6 }, { { 1, sym_NOT }, 3 }, { { 46, sym_IMP }, 29 },
   { { 1, sym_RIGHTPAR }, 16 }, { { 12, sym_LEFTPAR }, 5 }, { { 1, sym_BOXEND }, 15 }, { { 11, sym_BOXSTART }, 9 }, { { 1, sym_DIA }, 18 },
   { { 11, sym_ID }, 8 }, { { 12, sym_BOXSTART }, 9 }, { { 32, sym__recover_ }, 51 }, { { 1, sym_Command }, 2 }, { { 5, sym_DIA }, 18 },
   { { 52, sym_EQUIV }, 30 }, { { 48, sym_IMP }, 29 }, { { 42, sym_ID }, 8 }, { { 27, sym_BOX }, 12 }, { { 12, sym_BOX }, 12 },
   { { 1, sym_NNF }, 10 }, { { 48, sym_OR }, 28 }, { { 7, sym_OR }, 28 }, { { 11, sym_NNF }, 10 }, { { 50, sym_NOT }, 3 },
   { { 1, sym_Var }, 4 }, { { 60, sym_EQUIV }, 30 }, { { 15, sym__recover_ }, 39 }, { { 11, sym_Var }, 4 }, { { 7, sym_AND }, 27 },
   { { 1, sym_Formula }, 7 }, { { 37, sym_BOXSTART }, 9 }, { { 42, sym_NNF }, 10 }, { { 3, sym_CONST }, 17 }, { { 42, sym_Formula }, 58 },
   { { 6, sym_ID }, 23 }, { { 41, sym_EQUIV }, 30 }, { { 28, sym_Var }, 4 }, { { 50, sym_BOX }, 12 }, { { 18, sym_ID }, 35 },
   { { 5, sym_Formula }, 22 }, { { 3, sym_BOX }, 12 }, { { 42, sym_CONST }, 17 }, { { 18, sym_METAVAR }, 19 }, { { 36, sym_CONST }, 17 },
   { { 9, sym_Index }, 31 }, { { 22, sym_AND }, 27 }, { { 28, sym_DIASTART }, 6 }, { { 3, sym_BOXSTART }, 9 }, { { 18, sym_BOX }, 12 },
   { { 28, sym_NOT }, 3 }, { { 3, sym_NNF }, 10 }, { { 46, sym_OR }, 28 }, { { 18, sym_Index }, 42 }, { { 5, sym_NOT }, 3 },
   { { 7, sym_SEMICOLON }, 26 }, { { 1, sym_CONST }, 17 }, { { 5, sym_METAVAR }, 19 }, { { 5, sym_LEFTPAR }, 5 }, { { 3, sym_Var }, 4 },
   { { 18, sym_CONST }, 17 }, { { 11, sym_BOX }, 12 }, { { 60, sym_AND }, 27 }, { { 7, sym_EQUIV }, 30 }, { { 50, sym_Formula }, 60 },
   { { 5, sym_BOXSTART }, 9 }, { { 6, sym_Index }, 25 }, { { 3, sym_Formula }, 20 }, { { 28, sym_CONST }, 17 }, { { 28, sym_DIA }, 18 },
   { { 29, sym_Formula }, 48 }, { { 29, sym_ID }, 8 }, { { 30, sym_METAVAR }, 19 }, { { 12, sym_CONST }, 17 }, { { 29, sym_BOX }, 12 },
   { { 33, sym_OR }, 28 }, { { 1, sym_LEFTPAR }, 5 }, { { 49, sym_EQUIV }, 30 }, { { 36, sym_DIASTART }, 6 }, { { 29, sym_LEFTPAR }, 5 },
   { { 29, sym_DIASTART }, 6 }, { { 45, sym_NOT }, 3 }, { { 29, sym_CONST }, 17 }, { { 29, sym_DIA }, 18 }, { { 32, sym_DIA }, 18 },
   { { 30, sym_Formula }, 49 }, { { 25, sym_DIAEND }, 45 }, { { 32, sym_DIASTART }, 6 }, { { 49, sym_IMP }, 29 }, { { 30, sym_ID }, 8 },
   { { 1, sym_DIASTART }, 6 }, { { 30, sym_LEFTPAR }, 5 }, { { 30, sym_CONST }, 17 }, { { 30, sym_DIA }, 18 }, { { 30, sym_BOXSTART }, 9 },
   { { 32, sym_Formula }, 52 }, { { 11, sym_CONST }, 17 }, { { 32, sym_BOX }, 12 }, { { 32, sym_Var }, 4 }, { { 32, sym_CONST }, 17 },
   { { 32, sym_BOXSTART }, 9 }, { { 47, sym_EQUIV }, 30 }, { { 32, sym_NOT }, 3 }, { { 33, sym_EQUIV }, 30 }, { { 18, sym_BOXSTART }, 9 },
   { { 32, sym_METAVAR }, 19 }, { { 32, sym_NNF }, 10 }, { { 18, sym_Formula }, 41 }, { { 33, sym_SEMICOLON }, 53 }, { { 55, sym_OR }, 28 },
   { { 50, sym_Var }, 4 }, { { 34, sym_IMP }, 29 }, { { 33, sym_IMP }, 29 }, { { 33, sym_AND }, 27 }, { { 34, sym_EQUIV }, 30 },
   { { 34, sym_AND }, 27 }, { { 55, sym_SEMICOLON }, 63 }, { { 29, sym_NNF }, 10 }, { { 36, sym_Formula }, 54 }, { { 1, sym_BOX }, 12 },
   { { 7, sym_IMP }, 29 }, { { 36, sym_ID }, 8 }, { { 36, sym_BOX }, 12 }, { { 45, sym_DIASTART }, 6 }, { { 42, sym_BOX }, 12 },
   { { 36, sym_Var }, 4 }, { { 36, sym_DIA }, 18 }, { { 54, sym_OR }, 28 }, { { 36, sym_NOT }, 3 }, { { 50, sym_ID }, 8 },
   { { 36, sym_METAVAR }, 19 }, { { 37, sym_BOX }, 12 }, { { 37, sym_Var }, 4 }, { { 58, sym_AND }, 27 }, { { 37, sym_LEFTPAR }, 5 },
   { { 42, sym_DIASTART }, 6 }, { { 47, sym_IMP }, 29 }, { { 37, sym_CONST }, 17 }, { { 12, sym_Formula }, 34 }, { { 37, sym_NNF }, 10 },
   { { 37, sym_METAVAR }, 19 }, { { 11, sym_Formula }, 33 }, { { 40, sym_SEMICOLON }, 57 }, { { 41, sym_OR }, 28 }, { { 11, sym_DIASTART }, 6 },
   { { 41, sym_AND }, 27 }, { { 41, sym_IMP }, 29 }, { { 34, sym_OR }, 28 }, { { 42, sym_LEFTPAR }, 5 }, { { 32, sym_ID }, 8 },
   { { 42, sym_DIA }, 18 }, { { 5, sym_CONST }, 17 }, { { 42, sym_BOXSTART }, 9 }, { { 5, sym_Var }, 4 }, { { 42, sym_METAVAR }, 19 },
   { { 30, sym_BOX }, 12 }, { { 45, sym_ID }, 8 }, { { 45, sym_BOX }, 12 }, { { 30, sym_NOT }, 3 }, { { 5, sym_NNF }, 10 },
   { { 45, sym_Var }, 4 }, { { 45, sym_LEFTPAR }, 5 }, { { 45, sym_CONST }, 17 }, { { 39, sym_SEMICOLON }, 56 }, { { 45, sym_NNF }, 10 },
   { { 45, sym_DIA }, 18 }, { { 45, sym_BOXSTART }, 9 }, { { 45, sym_METAVAR }, 19 }, { { 12, sym_DIASTART }, 6 }, { { 46, sym_AND }, 27 },
   { { 46, sym_EQUIV }, 30 }, { { 42, sym_Var }, 4 }, { { 47, sym_OR }, 28 }, { { 6, sym_NUMBER }, 24 }, { { 50, sym_DIASTART }, 6 },
   { { 47, sym_AND }, 27 }, { { 52, sym_IMP }, 29 }, { { 37, sym_DIASTART }, 6 }, { { 48, sym_EQUIV }, 30 }, { { 29, sym_NOT }, 3 },
   { { 49, sym_OR }, 28 }, { { 3, sym_DIASTART }, 6 }, { { 32, sym_LEFTPAR }, 5 }, { { 49, sym_AND }, 27 }, { { 50, sym_LEFTPAR }, 5 }
};

const parser::statesymbol::map< std::vector< size_t >> parser::reductions =
{
   { { 60, sym_OR }, { 16 } }, { { 60, sym_IMP }, { 16 } }, { { 60, sym_SEMICOLON }, { 16 } }, { { 59, sym_OR }, { 18 } },
   { { 59, sym_SEMICOLON }, { 18 } }, { { 59, sym_RIGHTPAR }, { 18 } }, { { 58, sym_AND }, { 17 } }, { { 58, sym_OR }, { 17 } },
   { { 58, sym_IMP }, { 17 } }, { { 59, sym_AND }, { 18 } }, { { 58, sym_RIGHTPAR }, { 17 } }, { { 58, sym_SEMICOLON }, { 17 } },
   { { 54, sym_RIGHTPAR }, { 15 } }, { { 35, sym_DIASTART }, { 27 } }, { { 35, sym_SEMICOLON }, { 26 } }, { { 35, sym_BOXSTART }, { 27 } },
   { { 54, sym_AND }, { 15 } }, { { 35, sym_DIA }, { 27 } }, { { 20, sym_SEMICOLON }, { 10 } }, { { 35, sym_RIGHTPAR }, { 26 } },
   { { 47, sym_IMP }, { 12 } }, { { 35, sym_NOT }, { 27 } }, { { 35, sym_METAVAR }, { 27 } }, { { 34, sym_EQUIV }, { 19 } },
   { { 54, sym_SEMICOLON }, { 15 } }, { { 46, sym_IMP }, { 11 } }, { { 60, sym_AND }, { 16 } }, { { 35, sym_ID }, { 27 } },
   { { 35, sym_EQUIV }, { 26 } }, { { 35, sym_CONST }, { 27 } }, { { 60, sym_EQUIV }, { 16 } }, { { 35, sym_LEFTPAR }, { 27 } },
   { { 20, sym_RIGHTPAR }, { 10 } }, { { 35, sym_IMP }, { 26 } }, { { 35, sym_OR }, { 26 } }, { { 47, sym_EQUIV }, { 12 } },
   { { 20, sym_EQUIV }, { 10 } }, { { 49, sym_OR }, { 14 } }, { { 59, sym_EQUIV }, { 18 } }, { { 34, sym_AND }, { 19 } },
   { { 60, sym_RIGHTPAR }, { 16 } }, { { 20, sym_OR }, { 10 } }, { { 59, sym_IMP }, { 18 } }, { { 20, sym_IMP }, { 10 } },
   { { 58, sym_EQUIV }, { 17 } }, { { 54, sym_OR }, { 15 } }, { { 35, sym_AND }, { 26 } }, { { 20, sym_AND }, { 10 } },
   { { 34, sym_RIGHTPAR }, { 19 } }, { { 34, sym_IMP }, { 19 } }, { { 34, sym_SEMICOLON }, { 19 } }, { { 49, sym_AND }, { 14 } },
   { { 48, sym_RIGHTPAR }, { 13 } }, { { 35, sym_NNF }, { 27 } }, { { 35, sym_Formula }, { 27 } }, { { 35, sym_BOX }, { 27 } },
   { { 47, sym_RIGHTPAR }, { 12 } }, { { 46, sym_AND }, { 11 } }, { { 35, sym_Var }, { 27 } }, { { 41, sym_AND }, { 20 } },
   { { 41, sym_RIGHTPAR }, { 20 } }, { { 41, sym_EQUIV }, { 20 } }, { { 41, sym_OR }, { 20 } }, { { 48, sym_IMP }, { 13 } },
   { { 54, sym_IMP }, { 15 } }, { { 46, sym_SEMICOLON }, { 11 } }, { { 41, sym_SEMICOLON }, { 20 } }, { { 49, sym_IMP }, { 14 } },
   { { 34, sym_OR }, { 19 } }, { { 46, sym_EQUIV }, { 11 } }, { { 46, sym_OR }, { 11 } }, { { 47, sym_SEMICOLON }, { 12 } },
   { { 46, sym_RIGHTPAR }, { 11 } }, { { 47, sym_AND }, { 12 } }, { { 47, sym_OR }, { 12 } }, { { 54, sym_EQUIV }, { 15 } },
   { { 48, sym_SEMICOLON }, { 13 } }, { { 48, sym_EQUIV }, { 13 } }, { { 48, sym_OR }, { 13 } }, { { 41, sym_IMP }, { 20 } },
   { { 49, sym_SEMICOLON }, { 14 } }, { { 48, sym_AND }, { 13 } }, { { 49, sym_RIGHTPAR }, { 14 } }, { { 49, sym_EQUIV }, { 14 } }
};


const std::vector< parser::expectation > parser::errormessages =
{

};


