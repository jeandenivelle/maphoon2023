
// The code below was generated by Maphoon 2021.

// Definition of struct symbol:

#ifndef SYMBOL
#define SYMBOL    1

#include <iostream>
#include <variant>
#include <optional>
#include <stdexcept>

#line 21 "grammar.m"
 #include "tree.h" 

enum symboltype
{
   sym_mainloop, sym_expr3, sym_expr2, sym_expr1, 
   sym_expr, sym_STRING, sym_DOUBLE, sym_WHITESPACE, 
   sym_PLUS, sym_BLOCKCOMMENT, sym_INTEGER, sym_EOF, 
   sym_DOT, sym_ERROR, sym__recover_, sym_ASSIGN, 
   sym_LPAR, sym_LOOKAHEAD_EMPTY, sym_RPAR, sym_COMMA, 
   sym_exprlist, sym_MINUS, sym_TIMES, sym_DIVIDES
};

const char* getcstring( symboltype );

inline std::ostream& operator << ( std::ostream& out, symboltype tp )
   { out << getcstring( tp );  return out; }

struct symbol
{
   using attrtype = std::variant < std::monostate, util::shared_vector<tree>, double, 
         bigint, std::string, tree > ;

   symboltype type;
   attrtype attr;

   symbol( ) = delete;
   symbol( const symbol& ) = default;
   symbol( symbol&& ) noexcept = default;
   symbol& operator = ( const symbol& ) = default;
   symbol& operator = ( symbol&& ) noexcept = default;
   ~symbol( ) = default;

   symbol( symboltype type )
    : type( type )
   { }

   symbol( symboltype type,
           attrtype && attr )
    : type( type ),
      attr( std::move( attr ))
   { }

   symbol( symboltype type,
           const util::shared_vector<tree> & attr )
    : type( type ),
      attr( attr )
   { }

   symbol( symboltype type,
           util::shared_vector<tree> && attr )
    : type( type ),
      attr( std::move( attr ))
   { }

   symbol( symboltype type,
           double attr )
    : type( type ),
      attr( attr )
   { }

   symbol( symboltype type,
           const bigint & attr )
    : type( type ),
      attr( attr )
   { }

   symbol( symboltype type,
           bigint && attr )
    : type( type ),
      attr( std::move( attr ))
   { }

   symbol( symboltype type,
           const std::string & attr )
    : type( type ),
      attr( attr )
   { }

   symbol( symboltype type,
           std::string && attr )
    : type( type ),
      attr( std::move( attr ))
   { }

   symbol( symboltype type,
           const tree & attr )
    : type( type ),
      attr( attr )
   { }

   symbol( symboltype type,
           tree && attr )
    : type( type ),
      attr( std::move( attr ))
   { }


   void print( std::ostream& out ) const;

   template< typename T > const T& get( ) const
      { return std::get<T> ( attr ); }
   
   template< typename T > T& get( )
      { return std::get<T> ( attr ); }
   
};

inline
std::ostream& operator << ( std::ostream& out, const symbol& sym )
   { sym. print( out ); return out; }


#endif


