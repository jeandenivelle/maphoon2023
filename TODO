
put examples in text, not in code.

I think it should be possible to supress the header #line in
action code. Especially for small includes.
Make the #line directive in C++ output optional.
(One can just delete it. Write this in the manual.)

Start working on the manual. Started. 
Write in the manual about infotype.

reimplement hash function so that enumeration order is guaranteed 
This was obviously a dumb idea. It is not possible. One should simply
hash bucket wise, and use a commutative hash function inside
the bucket. For the moment, I check the quality of the hash
function, and it seems to be fine, so perhaps I will do nothing. 

Redo C-flat in Maphoon.
It would be good.

The accepting transition should be removed (I think).
It's better to keep them, because you want to put goto in a subroutine.
Otherwise, you may have to accept at goto in the subroutine.

look at : https://llvm.org/docs/ProgrammersManual.html#the-twine-class

Currently, the termination mechanism is not well working.
It seems that the best way is by assigning to timetosaygoodbye.
If this works, then the accepting state can be removed.
Maybe remove function ensurelookahead. I do not know what is
the best way to exit.

There is no error handling mechanism. What function should be called?
How should errors in general be handled? I think it is added (may 5th).

Manual needs to be updated.

There are likely problems with the C++ tokens allowed between { }.
I do not think that all of them are present. Just added a few. 

Do a test of the runtime conflict resolution.
If we pass the test, we can reduce the output.

Why is Maphoon so slow on the Easy grammar? Not sure yet. 

Full test that uses namespaces.

What happens when no input source is specified? Solved. 
(we create an error, and will not construct the parser.)

Maphoon seems to report too many conflicts.
I believe that this is solved (16july2021).

It should be possible to refuse reductions. I think I will do this
by having preconditions return signed short, with
1 : accept
0 : reject
-1 : reject the shift, (but not a possible further reduction). 
Currently, -1 blocks the shift, but not further reductions. 

A nicer syntax for %requires followed by nothing.
%reduces { }. It was done. 

Currently, _cpp seems to forbid #include Is that a good idea?

Replace 'form' by 'formula'. It just irritates me.

In lexer, add a filter? This is done. 

The error messages resulting from incorrectly terminated code
are not nice. This is probably corrected.

all kinds of problems with the optional attribute, etc. Deal with that.
I think this is done.

have a look at flatmap

check the problem reported by Dina in acceptor.h
(Solved).

move the filereader to the lexer directory? 

remember how position was handled and decide if I like it.
I think it needs improvement. Maybe hide it completely, and
require symbol.haslocation( ) and symbol.mergelocations( )
I believe that this is solved, 17 july. 

Code that inserts licences?

improve the hash function in operator( ) in idee.x

Write in the manual that the info type should be small.

Full test with namespaces.

Create a TPTP parser. A Prolog parser.

Create a full Prolog parser (to test the runtime conflict handling.)

The errors due to unterminated action code can be incomprensible. I think
that Maphoon should tell where the code started, then the user can check it.

Add an error for unspecified priorities? (Not sure).

Some of the functions need better hash functions.

A solution for case insensitive words? (use equivalence classes?)
Let the user program it. 

change form of action declarations into 
   auto parser::body( ) ->  type 
(that works better with namespaces ).

parser is not restartable. We need a clear method, and there
are problems in the description in the manual of the interface.
--> added a restart command.

I think we need an iswellformed check for symbol. Otherwise, one
gets bad_variant_access errors, which are very nasty to debug.
It is added 19 feb 2022! I called it: correctattribute( )

Fix the bug in the lexer, when an automaton is merged with itself: 
a |= a. Note: On 27 december 2021, I could not reproduce the bug,
and I looked at the code. I don't see how it could happen.
I think that this bug does not exist, I probably wrote
   for( i = 0; i != 20; ++ i )
      a |= a; 
which constructs an automaton with at least 2^20 states. 


Create a parser for the C& language.

Create a complete C-parser.

complete Lisp

Complete Prolog

Create decent error messages. This is a problem of bottom-up parsing.

Deal with the printing. Done.

Think about dangling else. Is it a problem?

Maphoon uses a few truly crappy hash functions. They should be improved. 

Maphoon currently accepts it, when you write SYM:i ind when SYM has no attribute.
It should be rejected by Maphoon itself already.  (Actually not sure)

Update manual on %end symbol

We need a check for symbols printing the same in the printautomaton. 
Otherwise, the automaton does not work and it is very hard to spot
the reason. I think that we should also
check for printability, while on the topic.
This was added 27 may. 

Warn for _ in symbols.

Write in the manual, how namespaces should be handled. It is annoying.

--------------------------------------------------------------------
Moving:
   Correct the get( ) functions in symbol. There must be only get( ) and
   get( ) const --> DONE.

   Rename 'topsymbol' -> 'symbolfromtop( )'. I don't like the name any more.

   solve the issue with return local variable vs return field.
   This problem needs to be solved.
   
   where do the spaces come from in inserted code? The lay out
   is crappy in general. 

   why does .canreduce not use getlookahead( ) ?
 
   move-only interferes badly with { }. This is not a specific Maphoon problem.

The prolog example is buggy in the tokenizer. It should accept -1 as integer.
   Same problem seems to exist with double.

There is no constructor : symbol( symboltype type, const attrtype& attr ). 

is resetlookahead ( ) a good name?

windows uses \ for directory separation. The #line crashes on those. Fix this. 

Check if the extra constructors help with conversions.

%on and %off commands?  Done, %skip %noskip

Made the info types available as A__info. 
(give them different names)?

In debug mode, it should give message, when the start symbol
is not among the list of start symbol.


