
// Parser generated by Maphoon 2021.
// Written by Hans de Nivelle, March 2021.
// See the licence that was included with the code.

#include "parser.h"

#line 133 "idee.x"


size_t parser::statesymbol::hash::operator( ) ( const statesymbol& ss ) const
{
   return ss.state + ( ss.type << 4 ) + ( ss.type );
}

bool
parser::statesymbol::equal_to::operator( ) ( const statesymbol& ss1,
                                             const statesymbol& ss2 ) const
{
   return ss1. state == ss2. state && ss1. type == ss2. type;
}


// Definitions of the reduction functions:

ast::listbp parser::body0( )
{
#line 63 "grammar.m"
 return ast::listbp( new ast::symbol( (topsymbol(1).get<std::string>()) ) ); }

ast::listbp parser::body1( )
{
#line 64 "grammar.m"
 return ast::listbp( new ast::string( (topsymbol(1).get<std::string>()) ) ); }

ast::listbp parser::body2( )
{
#line 65 "grammar.m"
 return ast::listbp( new ast::floating( (topsymbol(1).get<double>()) ) ); }

ast::listbp parser::body3( )
{
#line 66 "grammar.m"
 return ast::listbp( new ast::number( (topsymbol(1).get<bigint>()) ) ); }

ast::listbp parser::body4( )
{
#line 70 "grammar.m"
 return (topsymbol(1).get<ast::listbp>()); }

ast::listbp parser::body5( )
{
#line 71 "grammar.m"
 return (topsymbol(1).get<ast::listbp>()); }

ast::listbp parser::body6( )
{
#line 72 "grammar.m"
 
          return ast::listbp( new ast::list( ast::listbp( new ast::string( "quote" ) ), (topsymbol(1).get<ast::listbp>()) ) ); }

ast::listbp parser::body7( )
{
#line 76 "grammar.m"
 return ast::listbp( new ast::nil() ); }

ast::listbp parser::body8( )
{
#line 78 "grammar.m"

             return ast::listbp( new ast::list( (topsymbol(2).get<ast::listbp>()), (topsymbol(1).get<ast::listbp>()) ) ) ;
           }

ast::listbp parser::body9( )
{
#line 84 "grammar.m"

        return ast::listbp( new ast::list( (topsymbol(3).get<ast::listbp>()), (topsymbol(2).get<ast::listbp>()) ) );
      }



#line 1 "reduce"

void parser::reduce( symboltype lefttype,
               symbol::attrtype&& attr, size_t rightsize )
{
   if( debug >= 2 )
   {
      std::cout << "popping " << rightsize << " state/symbol from stack "; 
      std::cout << "and reducing into " << lefttype << "\n";
   }

#if true
   // This works only if symbol has an info type: 

   symbol::infotype info;
      // Look for the first symbol that has info:

   for( auto p = symbolstack. end( ) - rightsize; 
        !info. has_value( ) && p != symbolstack. end( ); ++ p ) 
   {
      if( p -> info. has_value( )) 
         info = std::move( p -> info );
   }
#endif 

   while( rightsize )
   {
      statestack. pop_back( );
      symbolstack. pop_back( );
      -- rightsize; 
   }
  
   // It remains to do the goto: 

   statestack. push_back( shifts. at( { statestack. back( ), lefttype } ));

#if true
   symbolstack. emplace_back( lefttype, info, std::move( attr ));
#else
   symbolstack. emplace_back( lefttype, std::move( attr ));
#endif 
}

#line 1 "parse"

symbol 
parser::parse( symboltype startsym )
{
   if( debug >= 2 ) 
   {
      std::cout << "Starting parser:\n";

      if( ! std::is_nothrow_move_constructible<symbol> :: value )
      {
         std::cout << "class symbol is not nothrow move constructible\n";
         std::cout << "   (this causes loss of efficiency)\n"; 
      }
      else
      {
         std::cout << "class symbol is nothrow move constructible\n";
         std::cout << "   (that is good)\n";
      }
   }

   if( debug >= 1 && 
          startsymbols. find( startsym ) == startsymbols. end( ))
   {
      std::cout << "startsymbol " << startsym << " is not a start symbol\n";
   }
 
   const auto& startinfo = startsymbols. at( startsym );
   statestack. push_back( startinfo. first );
  
mainloop: 
   if( debug >= 1 ) 
      print( std::cout ); 

   if( timetosaygoodbye )
   {
      if( debug >= 2 ) 
         std::cout << "time to say goodbye\n";

      symbol res = std::move( symbolstack. back( ));
      symbolstack. pop_back( );
      statestack. pop_back( );
      return res; 
   }
 
   size_t shift = reductioninfo. size( );  // Means undefined. 
   std::vector< size_t > redcandidates;

   // Decide if our state is a simple state:

   const auto& redinfo = reductioninfo[ statestack. back( ) ]; 

   // If the state is non-trivial, we need a lookahead:

   if( redinfo. first != 'T' && !lookahead. has_value( )) 
      lookahead =  tok.read_symbol(); 
  

   if( debug >= 3 && lookahead. has_value( ))
      std::cout << "lookahead " << lookahead. value( ) << "\n";

   switch( redinfo. first ) 
   {
   case 'N': 
   {
      auto p = shifts. find( 
               statesymbol( statestack.back( ), lookahead. value( ). type ));
      if( p != shifts. end( ))
         shift = p -> second;
      break;
   }
   case 'D':
   {
      auto p = shifts. find(
               statesymbol( statestack.back( ), lookahead. value( ). type ));
      if( p != shifts. end( ))
         shift = p -> second;
      else
         redcandidates. push_back( redinfo. second ); 
      break;
   }
   case 'H':
   {
      auto p = shifts. find(
               statesymbol( statestack. back( ), lookahead. value( ). type ));
      if( p != shifts. end( ))
         shift = p -> second; 
     
      auto q = reductions. find( 
               statesymbol( statestack. back( ), lookahead. value( ). type ));
      if( q != reductions. end( ))
         redcandidates = q -> second; 
      break;
   }
   case 'T':
      redcandidates. push_back( redinfo. second );
      break;   
   default:
      std::cout << redinfo.first << "\n";
      throw std::logic_error( "reduction info not recognized" );
   }
  
   if( debug >= 3 )
   { 
      if( shift != reductioninfo. size( ))
         std::cout << "shift candidate " << shift << "\n";

      if( redcandidates. size( )) 
      {
         std::cout << "reduction candidates: "; 
         for( size_t i = 0; i != redcandidates. size( ); ++ i )
            std::cout << redcandidates[i] << " ";
         std::cout << "\n";
      }
      else
         std::cout << "there are no reduction candidates\n";
   }

   // We need to find a reduction that agrees to be reduced: 

   for( const auto& r : redcandidates ) 
   {
      if( debug >= 3 ) 
         std::cout << "trying to reduce rule " << r << "\n";

      switch(r)
      {
      case 0:
         reduce( sym_ATOM, body0( ), 1 );
         goto mainloop;
         break;
      case 1:
         reduce( sym_ATOM, body1( ), 1 );
         goto mainloop;
         break;
      case 2:
         reduce( sym_ATOM, body2( ), 1 );
         goto mainloop;
         break;
      case 3:
         reduce( sym_ATOM, body3( ), 1 );
         goto mainloop;
         break;
      case 4:
         reduce( sym_S_EXPR, body4( ), 1 );
         goto mainloop;
         break;
      case 5:
         reduce( sym_S_EXPR, body5( ), 1 );
         goto mainloop;
         break;
      case 6:
         reduce( sym_S_EXPR, body6( ), 2 );
         goto mainloop;
         break;
      case 7:
         reduce( sym_LIST_REST, body7( ), 0 );
         goto mainloop;
         break;
      case 8:
         reduce( sym_LIST_REST, body8( ), 2 );
         goto mainloop;
         break;
      case 9:
         reduce( sym_LIST, body9( ), 4 );
         goto mainloop;
         break;
 
      default:
         throw std::logic_error( "reducing unknown rule" );  
      }
   }

   if( shift < reductioninfo. size( ))
   {
      if( debug >= 2 ) 
         std::cout << "shifting S" << shift << "\n";

      statestack. push_back( shift );
      symbolstack. push_back( std::move( lookahead. value( ) ));
      lookahead. reset( );

      if( lasterror < 10000 )
         ++ lasterror; 

      goto mainloop;
   }

   if( symbolstack. size( ) == 1 && symbolstack. front( ). type == startsym )
   {
      if( debug >= 2 ) 
         std::cout << "we accept the input\n";

      symbol res = std::move( symbolstack. front( ));
      symbolstack. clear( );
      statestack. pop_back( );
      return res;
   }

#line 1 "startpoint"

   unsigned int patience = syntaxerror( ); 
   if( patience ) 
   {
      if( debug >= 2 )
         std::cout << "trying to recover\n";

      if( debug >= 2 )
         std::cout << "patience remaining = " << patience << "\n";

      std::vector< std::pair< size_t, size_t >> shiftrecover; 
         // We collect the levels whose state can shift the  _recover_ 
         // symbol, 
         // combined with the states that will be reached after the shifts.

      for( size_t level = 0; level != statestack. size( ); ++ level )
      {
         size_t s = statestack[ level ];

         if( reductioninfo[s]. first == 'N' ||
             reductioninfo[s]. first == 'D' ||
             reductioninfo[s]. first == 'H' )
         {
            auto p = shifts. find( statesymbol( s, sym__recover_ ));
            if( p != shifts. end( ))
               shiftrecover. push_back( std::pair( level, p -> second ));
         }
      } 

      std::cout << "{";
      for( auto p = shiftrecover. begin( ); p != shiftrecover. end( ); ++ p )
      {
         if( p != shiftrecover. begin( ))
            std::cout << ", ";
         else
            std::cout << " ";
         std::cout << ( p -> first ) << "/" << ( p -> second );
      }
      std::cout << " }\n";

      if( shiftrecover. size( ) == 0 )
      {
         std::cout << "no recovering shifts found\n";
         std::cout << lookahead. value( ) << "\n";
         return lookahead. value( );
      }

      std::cout << "lookahead = " << lookahead. value( ) << "\n";

      // While we have patience left, and the lookahead is not
      // in the terminator set, we try to recover: 
 
      while( patience && 
             startinfo. second. count( lookahead. value( ). type ) == 0 )
      {
         // We look in shiftrecover for the highest level on
         // which we could shift current lookahead after shifting the 
         // _recover_ symbol. 

         size_t rec = shiftrecover. size( ); 
         while( rec != 0 ) 
         { 
            -- rec; 
            size_t s = shiftrecover[ rec ]. second; 
            
            if( reductioninfo[s]. first == 'N' ||
                reductioninfo[s]. first == 'D' ||
                reductioninfo[s]. first == 'H' )
            {
               auto after = shifts. find( 
                      statesymbol( s, lookahead. value( ). type ));

               if( after != shifts. end( ))
               {
                  std::cout << rec << " is candidate\n";
                  std::cout << "recovery will be into state ";
                  std::cout << after -> second << "\n";

                  while( statestack. size() > shiftrecover[ rec ]. first + 1 )
                  {
                     statestack. pop_back( );
                     symbolstack. pop_back( );  
                  } 
                  
                  statestack. push_back(s);
                  symbolstack. push_back( symbol( sym__recover_, {} ));

                  statestack. push_back( after -> second );
                  symbolstack. push_back( std::move( lookahead. value( ) ));
                  lookahead. reset( );

                  lasterror = 0;

                  print( std::cout );  
                  std::cout <<  "we are recovered!" << "\n\n";
                  goto mainloop; 
               } 
            }
         }

         // We throw away the current lookahead,
         // and lose a bit of our patience. 

         std::cout << "not yet recovered, patience = " << patience << "\n";
         lookahead =  tok.read_symbol(); 

         -- patience; 
      }
   }

   // That's it. Game over. We lost.

   if( debug )
   {
      if( !patience ) 
         std::cout << "recovery ran out of patience\n";
      else
         std::cout << "reached a terminator\n";
   }
   std::cout << lookahead. value( ) << "\n";
   return lookahead. value( ); 
}

#if ! false 

unsigned int 
parser::syntaxerror( )
{
   if( lasterror > 3 ) 
   {
      std::cout << "this looks like a new syntax error\n"; 
      return 6;
   }
   else
   {
      std::cout << "this looks like a failed recovery\n";
      return 6 - lasterror;
   }   
}

#endif

void 
parser::print( std::ostream& out ) const
{
   out << "Statestack: ";
   for( auto s : statestack )
      out << "S" << s << " ";
   out << "\n";

   out << "Symbolstack: ";
   for( const auto& s : symbolstack )
      out << s << "  ";
   out << "\n";
   if( lasterror < 10000 )
      out << "last error was " << lasterror << " symbols ago\n";

}

std::unordered_map< symboltype, std::pair< size_t, std::unordered_set< symboltype >>> parser::startsymbols =
{
   { sym_S_EXPR, { 0, { sym_EOF }} }
};

std::vector< std::pair< char, size_t >> parser::reductioninfo =
{
   { 'N', 0 }, { 'T', 1 }, { 'T', 2 }, { 'T', 3 }, { 'N', 0 }, { 'T', 0 }, { 'T', 4 }, { 'T', 5 },
   { 'N', 0 }, { 'D', 7 }, { 'T', 6 }, { 'D', 7 }, { 'N', 0 }, { 'T', 8 }, { 'T', 9 }, { 'N', 0 }
};

parser::statesymbol::map< size_t > parser::shifts =
{
   { { 11, sym_LPAR }, 4 }, { { 12, sym_RPAR }, 14 }, { { 11, sym_STR }, 1 }, { { 11, sym_S_EXPR }, 11 }, { { 11, sym_LIST_REST }, 13 },
   { { 9, sym_FLOAT }, 2 }, { { 9, sym_INT }, 3 }, { { 9, sym_ID }, 5 }, { { 9, sym_ATOM }, 6 }, { { 9, sym_QUOT }, 8 },
   { { 9, sym_STR }, 1 }, { { 9, sym_S_EXPR }, 11 }, { { 4, sym_LIST }, 7 }, { { 4, sym_LPAR }, 4 }, { { 4, sym_QUOT }, 8 },
   { { 11, sym_ATOM }, 6 }, { { 0, sym_FLOAT }, 2 }, { { 9, sym_LIST_REST }, 12 }, { { 11, sym_FLOAT }, 2 }, { { 0, sym_INT }, 3 },
   { { 11, sym_INT }, 3 }, { { 8, sym_QUOT }, 8 }, { { 11, sym_LIST }, 7 }, { { 0, sym_LPAR }, 4 }, { { 8, sym_ID }, 5 },
   { { 0, sym_ID }, 5 }, { { 0, sym_ATOM }, 6 }, { { 11, sym_QUOT }, 8 }, { { 0, sym_LIST }, 7 }, { { 4, sym_STR }, 1 },
   { { 4, sym_S_EXPR }, 9 }, { { 0, sym_QUOT }, 8 }, { { 0, sym_STR }, 1 }, { { 0, sym_S_EXPR }, 15 }, { { 11, sym_ID }, 5 },
   { { 4, sym_ATOM }, 6 }, { { 9, sym_LPAR }, 4 }, { { 4, sym_ID }, 5 }, { { 4, sym_INT }, 3 }, { { 4, sym_FLOAT }, 2 },
   { { 9, sym_LIST }, 7 }, { { 8, sym_STR }, 1 }, { { 8, sym_S_EXPR }, 10 }, { { 8, sym_LIST }, 7 }, { { 8, sym_ATOM }, 6 },
   { { 8, sym_INT }, 3 }, { { 8, sym_FLOAT }, 2 }, { { 8, sym_LPAR }, 4 }
};

parser::statesymbol::map< std::vector< size_t >> parser::reductions =
{
   
};



